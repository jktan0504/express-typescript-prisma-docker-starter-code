{
    "name": "ezchat-api",
    "version": "1.0.0",
    "description": "EzChat Appliation Backend API Services",
    "main": "index.ts",
    "keywords": [
        "ezchat",
        "typescript",
        "docker",
        "waha"
    ],
    "author": {
        "name": "JK",
        "email": "jktan0504@hotmail.com",
        "url": "http://jkdeveloper.com"
    },
    "license": "ISC",
    "scripts": {
        "dev": "env-cmd --file .env.development ts-node-dev --transpile-only --ignore-watch node_modules src/index.ts | pnpx pino-pretty",
        "test": "env-cmd --file .env.test jest --silent --runInBand --detectOpenHandles --passWithNoTests",
        "test:watch": "env-cmd --file .env.test jest --watch",
        "build": "pnpx env-cmd --file .env.development rimraf build && npx tsc",
        "build:server": "npx env-cmd --file .env.development rimraf build && swc ./src -d build",
        "start:production": "env-cmd --file .env.production npm run build && node ./build/index.js",
        "start:development": "ts-node-dev src/swagger/swagger.ts && env-cmd --file .env.development ts-node-dev --transpile-only --ignore-watch node_modules src/index.ts",
        "knex:migrate:make": "env-cmd --file .env.development knex --knexfile src/core/configs/knexfile.ts migrate:make",
        "knex:migrate:latest": "env-cmd --file .env.development knex --knexfile src/core/configs/knexfile.ts migrate:latest",
        "knex:migrate:rollback": "env-cmd --file .env.development knex --knexfile src/core/configs/knexfile.ts migrate:rollback",
        "knex:seed:make": "env-cmd --file .env.development knex --knexfile src/core/configs/knexfile.ts seed:make",
        "knex:seed": "env-cmd --file .env.development knex --knexfile src/core/configs/knexfile.ts seed:run",
        "prisma:generate:watch": "prisma generate --watch",
        "prisma:migrate": "prisma migrate dev --skip-seed",
        "prisma:seed": "prisma db seed",
        "prisma:reset": "prisma migrate reset",
        "prisma:studio": "prisma studio",
        "prisma:format": "prisma format",
        "prisma:dev:sync": "env-cmd --file .env.development prisma db pull && prisma generate && prisma format",
        "prisma:prod:sync": "env-cmd --file .env.production prisma db pull && prisma generate && prisma format",
        "prettier-format": "prettier --config .prettierrc.json 'src/**/*.ts' --write",
        "format": "pnpx prettier --write \"src/**/*.ts\"",
        "format-all": "pnpx prettier --write .",
        "lint": "pnpx eslint .",
        "swagger": "ts-node src/swagger/swagger.ts",
        "start:cron-dev": "env-cmd --file .env.development ts-node src/cron/index.ts",
        "start:cron-prod": "env-cmd --file .env.production ts-node src/cron/index.ts",
        "staging:db:migrate": "env-cmd --file .env.staging pnpx knex --knexfile src/core/configs/knexfile.ts migrate:latest",
        "staging:db:seed": "env-cmd --file .env.staging pnpx knex --knexfile src/core/configs/knexfile.ts seed:run",
        "staging:build": "pnpx env-cmd --file .env.staging rimraf build && swc ./src -d build",
        "staging:build:cp": "pnpx env-cmd --file .env.staging rimraf build && swc ./src -d build && cp -r ./src/database/certs ./build/src/database/certs && cp ./src/swagger/swagger-output.json ./build/src/swagger/swagger-output.json",
        "staging": "pnpx env-cmd --file ../.env.staging nodemon src/server.ts",
        "staging:swagger": "pnpx concurrently \"nodemon\" \"nodemon -x tsoa spec\"",
        "staging:prisma:generate": "env-cmd --file .env.staging pnpx prisma generate",
        "staging:start": "env-cmd --file ./.env.staging node build/src/server.js",
        "staging:start:docker:build": "env-cmd --file .env.staging npm run staging:build && node --inspect=0.0.0.0 build/src/server.js",
        "staging:start:docker": "env-cmd --file .env.staging node --inspect=0.0.0.0 build/src/server.js",
        "prepare": "husky"
    },
    "devDependencies": {
        "@faker-js/faker": "^8.4.1",
        "@swc/cli": "^0.3.14",
        "@swc/core": "1.6.5",
        "@types/bcrypt": "^5.0.2",
        "@types/cors": "^2.8.17",
        "@types/express": "^4.17.21",
        "@types/express-fileupload": "^1.5.0",
        "@types/jest": "^29.5.12",
        "@types/jsonwebtoken": "^9.0.6",
        "@types/node": "^20.14.9",
        "@types/node-cron": "^3.0.11",
        "@types/node-emoji": "^2.1.0",
        "@types/papaparse": "^5.3.14",
        "@types/redis": "^4.0.11",
        "@types/redis-mock": "^0.17.3",
        "@types/uuid": "^10.0.0",
        "@typescript-eslint/eslint-plugin": "^7.14.1",
        "@typescript-eslint/parser": "^7.14.1",
        "async": "link:@types/nanoid/async",
        "env-cmd": "^10.1.0",
        "eslint": "^9.5.0",
        "husky": "^9.0.11",
        "jest": "^29.7.0",
        "moment-timezone": "^0.5.45",
        "nock": "^13.5.4",
        "nodemon": "^3.1.4",
        "prisma": "^5.16.0",
        "redis-mock": "^0.56.3",
        "rimraf": "^5.0.7",
        "swagger-autogen": "^2.23.7",
        "ts-jest": "^29.1.5",
        "ts-node": "^10.9.2",
        "ts-node-dev": "^2.0.0",
        "typescript": "^5.5.2"
    },
    "dependencies": {
        "@prisma/client": "^5.16.0",
        "@redis/client": "^1.5.16",
        "aws-sdk": "^2.1648.0",
        "axios": "^1.7.2",
        "bcrypt": "^5.1.1",
        "cors": "^2.8.5",
        "csvtojson": "^2.0.10",
        "dotenv": "^16.4.5",
        "express": "^4.19.2",
        "express-async-error": "^0.0.2",
        "express-async-errors": "^3.1.1",
        "express-fileupload": "^1.5.0",
        "fast-equals": "^5.0.1",
        "file-stream-rotator": "^1.0.0",
        "http-status-codes": "^2.3.0",
        "inversify": "^6.0.2",
        "joi": "^17.13.3",
        "jsonwebtoken": "^9.0.2",
        "knex": "^3.1.0",
        "knex-paginate": "^3.1.4",
        "moment": "^2.30.1",
        "nanoid": "3.3.6",
        "node-cron": "^3.0.3",
        "node-emoji": "^2.1.3",
        "papaparse": "^5.4.1",
        "pg": "^8.12.0",
        "pino": "^9.2.0",
        "pino-http": "^10.1.0",
        "pino-pretty": "^11.2.1",
        "redis": "^4.6.14",
        "reflect-metadata": "^0.2.2",
        "uuid": "^10.0.0"
    },
    "prisma": {
        "schema": "./src/infrastructures/databases/prisma/schema.prisma"
    }
}
