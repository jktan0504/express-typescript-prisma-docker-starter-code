generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model countries {
  id                                   BigInt       @id @default(autoincrement())
  name                                 String?      @unique(map: "countries_name_unique") @db.VarChar(255)
  code                                 String?      @db.VarChar(255)
  timezone                             String?      @db.VarChar(255)
  currency_id                          BigInt?
  activated                            Boolean?     @default(true)
  created_at                           DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at                           DateTime?    @default(now()) @db.Timestamptz(6)
  created_by_id                        String?      @db.Uuid
  updated_by_id                        String?      @db.Uuid
  users_countries_created_by_idTousers users?       @relation("countries_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "countries_created_by_id_foreign")
  currencies                           currencies?  @relation(fields: [currency_id], references: [id], onDelete: Cascade, map: "countries_currency_id_foreign")
  users_countries_updated_by_idTousers users?       @relation("countries_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "countries_updated_by_id_foreign")
  user_infos                           user_infos[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model currencies {
  id                                    BigInt      @id @default(autoincrement())
  name                                  String?     @unique(map: "currencies_name_unique") @db.VarChar(255)
  code                                  String?     @db.VarChar(255)
  symbol                                String?     @db.VarChar(255)
  activated                             Boolean?    @default(true)
  created_at                            DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at                            DateTime?   @default(now()) @db.Timestamptz(6)
  created_by_id                         String?     @db.Uuid
  updated_by_id                         String?     @db.Uuid
  countries                             countries[]
  users_currencies_created_by_idTousers users?      @relation("currencies_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "currencies_created_by_id_foreign")
  users_currencies_updated_by_idTousers users?      @relation("currencies_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "currencies_updated_by_id_foreign")
}

model knex_migrations {
  id             Int       @id @default(autoincrement())
  name           String?   @db.VarChar(255)
  batch          Int?
  migration_time DateTime? @db.Timestamptz(6)
}

model knex_migrations_lock {
  index     Int  @id @default(autoincrement())
  is_locked Int?
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model media {
  id                               String                   @id @unique(map: "media_id_unique") @db.Uuid
  name                             String?                  @unique(map: "media_name_unique") @db.VarChar(255)
  description                      String?
  activated                        Boolean?                 @default(true)
  created_at                       DateTime?                @default(now()) @db.Timestamptz(6)
  updated_at                       DateTime?                @default(now()) @db.Timestamptz(6)
  created_by_id                    String?                  @db.Uuid
  updated_by_id                    String?                  @db.Uuid
  chat_messages                    chat_messages[]
  companies                        companies[]
  company_categories               company_categories[]
  users_media_created_by_idTousers users?                   @relation("media_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "media_created_by_id_foreign")
  users_media_updated_by_idTousers users?                   @relation("media_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "media_updated_by_id_foreign")
  media_files                      media_files[]
  user_infos                       user_infos[]
  user_template_messages           user_template_messages[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model roles {
  id                               BigInt    @id @default(autoincrement())
  name                             String?   @unique(map: "roles_name_unique") @db.VarChar(255)
  description                      String?
  activated                        Boolean?  @default(true)
  created_at                       DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                       DateTime? @default(now()) @db.Timestamptz(6)
  created_by_id                    String?   @db.Uuid
  updated_by_id                    String?   @db.Uuid
  users_roles_created_by_idTousers users?    @relation("roles_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "roles_created_by_id_foreign")
  users_roles_updated_by_idTousers users?    @relation("roles_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "roles_updated_by_id_foreign")
  users_users_role_idToroles       users[]   @relation("users_role_idToroles")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model sso_auth_providers {
  id                                                   BigInt    @id @default(autoincrement())
  name                                                 String?   @unique(map: "sso_auth_providers_name_unique") @db.VarChar(255)
  client_id                                            String?
  client_secret                                        String?
  activated                                            Boolean?  @default(true)
  created_at                                           DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                                           DateTime? @default(now()) @db.Timestamptz(6)
  created_by_id                                        String?   @db.Uuid
  updated_by_id                                        String?   @db.Uuid
  users_sso_auth_providers_created_by_idTousers        users?    @relation("sso_auth_providers_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sso_auth_providers_created_by_id_foreign")
  users_sso_auth_providers_updated_by_idTousers        users?    @relation("sso_auth_providers_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sso_auth_providers_updated_by_id_foreign")
  users_users_sso_auth_provider_idTosso_auth_providers users[]   @relation("users_sso_auth_provider_idTosso_auth_providers")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_infos {
  id                                    String     @id @unique(map: "user_infos_id_unique") @db.Uuid
  nickname                              String?    @db.VarChar(255)
  email                                 String?    @unique(map: "user_infos_email_unique") @db.VarChar(255)
  first_name                            String?    @db.VarChar(255)
  last_name                             String?    @db.VarChar(255)
  contact_number                        String?    @unique(map: "user_infos_contact_number_unique") @db.VarChar(255)
  age                                   Int?       @default(0)
  gender                                String?    @default("male")
  ic_number                             String?    @unique(map: "user_infos_ic_number_unique") @db.VarChar(255)
  birthdate                             DateTime?  @db.Date
  avatar_id                             String?    @db.Uuid
  country_id                            BigInt?
  social_telegram                       String?    @db.VarChar(255)
  social_facebook                       String?    @db.VarChar(255)
  social_instagram                      String?    @db.VarChar(255)
  activated                             Boolean?   @default(true)
  created_at                            DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at                            DateTime?  @default(now()) @db.Timestamptz(6)
  created_by_id                         String?    @db.Uuid
  updated_by_id                         String?    @db.Uuid
  contacts                              contacts[]
  media                                 media?     @relation(fields: [avatar_id], references: [id], onDelete: Cascade, map: "user_infos_avatar_id_foreign")
  countries                             countries? @relation(fields: [country_id], references: [id], onDelete: Cascade, map: "user_infos_country_id_foreign")
  users_user_infos_created_by_idTousers users?     @relation("user_infos_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_infos_created_by_id_foreign")
  users_user_infos_updated_by_idTousers users?     @relation("user_infos_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_infos_updated_by_id_foreign")
  users_users_user_info_idTouser_infos  users[]    @relation("users_user_info_idTouser_infos")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model users {
  id                                                                               String                          @id @unique(map: "users_id_unique") @db.Uuid
  username                                                                         String?                         @unique(map: "users_username_unique") @db.VarChar(255)
  password                                                                         String?                         @db.VarChar(255)
  device_id                                                                        String?                         @db.VarChar(255)
  is_email_verified                                                                Boolean?                        @default(false)
  email_verified_at                                                                DateTime?                       @db.Date
  user_info_id                                                                     String?                         @db.Uuid
  role_id                                                                          BigInt?
  sso_auth_provider_id                                                             BigInt?
  sso_token                                                                        String?                         @db.VarChar(255)
  is_pruned                                                                        Boolean?                        @default(false)
  activated                                                                        Boolean?                        @default(true)
  created_at                                                                       DateTime?                       @default(now()) @db.Timestamptz(6)
  updated_at                                                                       DateTime?                       @default(now()) @db.Timestamptz(6)
  created_by_id                                                                    String?                         @db.Uuid
  updated_by_id                                                                    String?                         @db.Uuid
  chat_messages_chat_messages_created_by_idTousers                                 chat_messages[]                 @relation("chat_messages_created_by_idTousers")
  chat_messages_chat_messages_updated_by_idTousers                                 chat_messages[]                 @relation("chat_messages_updated_by_idTousers")
  chat_messages_chat_messages_user_idTousers                                       chat_messages[]                 @relation("chat_messages_user_idTousers")
  chat_messages_log_chat_messages_log_created_by_idTousers                         chat_messages_log[]             @relation("chat_messages_log_created_by_idTousers")
  chat_messages_log_chat_messages_log_updated_by_idTousers                         chat_messages_log[]             @relation("chat_messages_log_updated_by_idTousers")
  chatrooms_chatrooms_created_by_idTousers                                         chatrooms[]                     @relation("chatrooms_created_by_idTousers")
  chatrooms_chatrooms_updated_by_idTousers                                         chatrooms[]                     @relation("chatrooms_updated_by_idTousers")
  chatrooms_chatrooms_user_idTousers                                               chatrooms[]                     @relation("chatrooms_user_idTousers")
  companies_companies_created_by_idTousers                                         companies[]                     @relation("companies_created_by_idTousers")
  companies_companies_updated_by_idTousers                                         companies[]                     @relation("companies_updated_by_idTousers")
  company_categories_company_categories_created_by_idTousers                       company_categories[]            @relation("company_categories_created_by_idTousers")
  company_categories_company_categories_updated_by_idTousers                       company_categories[]            @relation("company_categories_updated_by_idTousers")
  contacts_contacts_created_by_idTousers                                           contacts[]                      @relation("contacts_created_by_idTousers")
  contacts_contacts_updated_by_idTousers                                           contacts[]                      @relation("contacts_updated_by_idTousers")
  contacts_contacts_user_idTousers                                                 contacts[]                      @relation("contacts_user_idTousers")
  countries_countries_created_by_idTousers                                         countries[]                     @relation("countries_created_by_idTousers")
  countries_countries_updated_by_idTousers                                         countries[]                     @relation("countries_updated_by_idTousers")
  currencies_currencies_created_by_idTousers                                       currencies[]                    @relation("currencies_created_by_idTousers")
  currencies_currencies_updated_by_idTousers                                       currencies[]                    @relation("currencies_updated_by_idTousers")
  media_media_created_by_idTousers                                                 media[]                         @relation("media_created_by_idTousers")
  media_media_updated_by_idTousers                                                 media[]                         @relation("media_updated_by_idTousers")
  media_files_media_files_created_by_idTousers                                     media_files[]                   @relation("media_files_created_by_idTousers")
  media_files_media_files_updated_by_idTousers                                     media_files[]                   @relation("media_files_updated_by_idTousers")
  merchants_merchants_created_by_idTousers                                         merchants[]                     @relation("merchants_created_by_idTousers")
  merchants_merchants_updated_by_idTousers                                         merchants[]                     @relation("merchants_updated_by_idTousers")
  merchants_merchants_user_idTousers                                               merchants[]                     @relation("merchants_user_idTousers")
  queue_jobs_queue_jobs_created_by_idTousers                                       queue_jobs[]                    @relation("queue_jobs_created_by_idTousers")
  queue_jobs_queue_jobs_updated_by_idTousers                                       queue_jobs[]                    @relation("queue_jobs_updated_by_idTousers")
  roles_roles_created_by_idTousers                                                 roles[]                         @relation("roles_created_by_idTousers")
  roles_roles_updated_by_idTousers                                                 roles[]                         @relation("roles_updated_by_idTousers")
  server_user_sessions_server_user_sessions_created_by_idTousers                   server_user_sessions[]          @relation("server_user_sessions_created_by_idTousers")
  server_user_sessions_server_user_sessions_updated_by_idTousers                   server_user_sessions[]          @relation("server_user_sessions_updated_by_idTousers")
  server_user_sessions_server_user_sessions_user_idTousers                         server_user_sessions[]          @relation("server_user_sessions_user_idTousers")
  servers_servers_created_by_idTousers                                             servers[]                       @relation("servers_created_by_idTousers")
  servers_servers_updated_by_idTousers                                             servers[]                       @relation("servers_updated_by_idTousers")
  sso_auth_providers_sso_auth_providers_created_by_idTousers                       sso_auth_providers[]            @relation("sso_auth_providers_created_by_idTousers")
  sso_auth_providers_sso_auth_providers_updated_by_idTousers                       sso_auth_providers[]            @relation("sso_auth_providers_updated_by_idTousers")
  user_infos_user_infos_created_by_idTousers                                       user_infos[]                    @relation("user_infos_created_by_idTousers")
  user_infos_user_infos_updated_by_idTousers                                       user_infos[]                    @relation("user_infos_updated_by_idTousers")
  user_message_bundle_templates_user_message_bundle_templates_created_by_idTousers user_message_bundle_templates[] @relation("user_message_bundle_templates_created_by_idTousers")
  user_message_bundle_templates_user_message_bundle_templates_updated_by_idTousers user_message_bundle_templates[] @relation("user_message_bundle_templates_updated_by_idTousers")
  user_message_bundle_templates_user_message_bundle_templates_user_idTousers       user_message_bundle_templates[] @relation("user_message_bundle_templates_user_idTousers")
  user_template_messages_user_template_messages_created_by_idTousers               user_template_messages[]        @relation("user_template_messages_created_by_idTousers")
  user_template_messages_user_template_messages_updated_by_idTousers               user_template_messages[]        @relation("user_template_messages_updated_by_idTousers")
  users_users_created_by_idTousers                                                 users?                          @relation("users_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_created_by_id_foreign")
  other_users_users_created_by_idTousers                                           users[]                         @relation("users_created_by_idTousers")
  roles_users_role_idToroles                                                       roles?                          @relation("users_role_idToroles", fields: [role_id], references: [id], onDelete: Cascade, map: "users_role_id_foreign")
  sso_auth_providers_users_sso_auth_provider_idTosso_auth_providers                sso_auth_providers?             @relation("users_sso_auth_provider_idTosso_auth_providers", fields: [sso_auth_provider_id], references: [id], onDelete: Cascade, map: "users_sso_auth_provider_id_foreign")
  users_users_updated_by_idTousers                                                 users?                          @relation("users_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_updated_by_id_foreign")
  other_users_users_updated_by_idTousers                                           users[]                         @relation("users_updated_by_idTousers")
  user_infos_users_user_info_idTouser_infos                                        user_infos?                     @relation("users_user_info_idTouser_infos", fields: [user_info_id], references: [id], onDelete: Cascade, map: "users_user_info_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model chat_messages {
  id                                                 String                  @id @unique(map: "chat_messages_id_unique") @db.Uuid
  message                                            String?
  chatroom_id                                        String?                 @db.Uuid
  user_id                                            String?                 @db.Uuid
  contact_id                                         String?                 @db.Uuid
  user_template_message_id                           String?                 @db.Uuid
  message_attachment_id                              String?                 @db.Uuid
  is_sentby_contact                                  Boolean?                @default(false)
  is_seen                                            Boolean?                @default(false)
  activated                                          Boolean?                @default(true)
  created_at                                         DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at                                         DateTime?               @default(now()) @db.Timestamptz(6)
  created_by_id                                      String?                 @db.Uuid
  updated_by_id                                      String?                 @db.Uuid
  chatrooms_chat_messages_chatroom_idTochatrooms     chatrooms?              @relation("chat_messages_chatroom_idTochatrooms", fields: [chatroom_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chat_messages_chatroom_id_foreign")
  contacts                                           contacts?               @relation(fields: [contact_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chat_messages_contact_id_foreign")
  users_chat_messages_created_by_idTousers           users?                  @relation("chat_messages_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chat_messages_created_by_id_foreign")
  media                                              media?                  @relation(fields: [message_attachment_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chat_messages_message_attachment_id_foreign")
  users_chat_messages_updated_by_idTousers           users?                  @relation("chat_messages_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chat_messages_updated_by_id_foreign")
  users_chat_messages_user_idTousers                 users?                  @relation("chat_messages_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chat_messages_user_id_foreign")
  user_template_messages                             user_template_messages? @relation(fields: [user_template_message_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chat_messages_user_template_message_id_foreign")
  chat_messages_log                                  chat_messages_log[]
  chatrooms_chatrooms_last_message_idTochat_messages chatrooms[]             @relation("chatrooms_last_message_idTochat_messages")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model chat_messages_log {
  id                                           String                  @id @unique(map: "chat_messages_log_id_unique") @db.Uuid
  status                                       String?                 @default("pending") @db.VarChar(255)
  chat_message_id                              String?                 @db.Uuid
  user_template_message_id                     String?                 @db.Uuid
  activated                                    Boolean?                @default(true)
  created_at                                   DateTime?               @default(now()) @db.Timestamptz(6)
  updated_at                                   DateTime?               @default(now()) @db.Timestamptz(6)
  created_by_id                                String?                 @db.Uuid
  updated_by_id                                String?                 @db.Uuid
  chat_messages                                chat_messages?          @relation(fields: [chat_message_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chat_messages_log_chat_message_id_foreign")
  users_chat_messages_log_created_by_idTousers users?                  @relation("chat_messages_log_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chat_messages_log_created_by_id_foreign")
  users_chat_messages_log_updated_by_idTousers users?                  @relation("chat_messages_log_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chat_messages_log_updated_by_id_foreign")
  user_template_messages                       user_template_messages? @relation(fields: [user_template_message_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chat_messages_log_user_template_message_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model chatrooms {
  id                                                     String          @id @unique(map: "chatrooms_id_unique") @db.Uuid
  remark                                                 String?
  user_id                                                String?         @db.Uuid
  contact_id                                             String?         @db.Uuid
  last_message_id                                        String?         @db.Uuid
  activated                                              Boolean?        @default(true)
  created_at                                             DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at                                             DateTime?       @default(now()) @db.Timestamptz(6)
  created_by_id                                          String?         @db.Uuid
  updated_by_id                                          String?         @db.Uuid
  chat_messages_chat_messages_chatroom_idTochatrooms     chat_messages[] @relation("chat_messages_chatroom_idTochatrooms")
  contacts                                               contacts?       @relation(fields: [contact_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chatrooms_contact_id_foreign")
  users_chatrooms_created_by_idTousers                   users?          @relation("chatrooms_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chatrooms_created_by_id_foreign")
  chat_messages_chatrooms_last_message_idTochat_messages chat_messages?  @relation("chatrooms_last_message_idTochat_messages", fields: [last_message_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chatrooms_last_message_id_foreign")
  users_chatrooms_updated_by_idTousers                   users?          @relation("chatrooms_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chatrooms_updated_by_id_foreign")
  users_chatrooms_user_idTousers                         users?          @relation("chatrooms_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chatrooms_user_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model companies {
  id                                   String              @id @unique(map: "companies_id_unique") @db.Uuid
  name                                 String?             @unique(map: "companies_name_unique") @db.VarChar(255)
  description                          String?
  registration_number                  String?             @db.VarChar(255)
  company_category_id                  BigInt?
  logo_id                              String?             @db.Uuid
  activated                            Boolean?            @default(true)
  created_at                           DateTime?           @default(now()) @db.Timestamptz(6)
  updated_at                           DateTime?           @default(now()) @db.Timestamptz(6)
  created_by_id                        String?             @db.Uuid
  updated_by_id                        String?             @db.Uuid
  company_categories                   company_categories? @relation(fields: [company_category_id], references: [id], onDelete: Cascade, map: "companies_company_category_id_foreign")
  users_companies_created_by_idTousers users?              @relation("companies_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "companies_created_by_id_foreign")
  media                                media?              @relation(fields: [logo_id], references: [id], onDelete: Cascade, map: "companies_logo_id_foreign")
  users_companies_updated_by_idTousers users?              @relation("companies_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "companies_updated_by_id_foreign")
  merchants                            merchants[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model company_categories {
  id                                            BigInt      @id @default(autoincrement())
  name                                          String?     @unique(map: "company_categories_name_unique") @db.VarChar(255)
  description                                   String?
  icon_id                                       String?     @db.Uuid
  activated                                     Boolean?    @default(true)
  created_at                                    DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at                                    DateTime?   @default(now()) @db.Timestamptz(6)
  created_by_id                                 String?     @db.Uuid
  updated_by_id                                 String?     @db.Uuid
  companies                                     companies[]
  users_company_categories_created_by_idTousers users?      @relation("company_categories_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "company_categories_created_by_id_foreign")
  media                                         media?      @relation(fields: [icon_id], references: [id], onDelete: Cascade, map: "company_categories_icon_id_foreign")
  users_company_categories_updated_by_idTousers users?      @relation("company_categories_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "company_categories_updated_by_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model contacts {
  id                                  String          @id @unique(map: "contacts_id_unique") @db.Uuid
  user_info_id                        String?         @db.Uuid
  user_id                             String?         @db.Uuid
  activated                           Boolean?        @default(true)
  created_at                          DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at                          DateTime?       @default(now()) @db.Timestamptz(6)
  created_by_id                       String?         @db.Uuid
  updated_by_id                       String?         @db.Uuid
  chat_messages                       chat_messages[]
  chatrooms                           chatrooms[]
  users_contacts_created_by_idTousers users?          @relation("contacts_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "contacts_created_by_id_foreign")
  users_contacts_updated_by_idTousers users?          @relation("contacts_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "contacts_updated_by_id_foreign")
  users_contacts_user_idTousers       users?          @relation("contacts_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, map: "contacts_user_id_foreign")
  user_infos                          user_infos?     @relation(fields: [user_info_id], references: [id], onDelete: Cascade, map: "contacts_user_info_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model media_files {
  id                                     String    @id @unique(map: "media_files_id_unique") @db.Uuid
  resolution                             String?   @db.VarChar(255)
  file_key                               String?   @db.VarChar(255)
  file_type                              String?   @db.VarChar(255)
  url                                    String?   @db.VarChar(255)
  media_id                               String?   @db.Uuid
  activated                              Boolean?  @default(true)
  created_at                             DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                             DateTime? @default(now()) @db.Timestamptz(6)
  created_by_id                          String?   @db.Uuid
  updated_by_id                          String?   @db.Uuid
  users_media_files_created_by_idTousers users?    @relation("media_files_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "media_files_created_by_id_foreign")
  media                                  media?    @relation(fields: [media_id], references: [id], onDelete: Cascade, map: "media_files_media_id_foreign")
  users_media_files_updated_by_idTousers users?    @relation("media_files_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "media_files_updated_by_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model merchants {
  id                                   String     @id @unique(map: "merchants_id_unique") @db.Uuid
  keywords                             String?
  remark                               String?
  company_id                           String?    @db.Uuid
  user_id                              String?    @db.Uuid
  activated                            Boolean?   @default(true)
  created_at                           DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at                           DateTime?  @default(now()) @db.Timestamptz(6)
  created_by_id                        String?    @db.Uuid
  updated_by_id                        String?    @db.Uuid
  companies                            companies? @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "merchants_company_id_foreign")
  users_merchants_created_by_idTousers users?     @relation("merchants_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "merchants_created_by_id_foreign")
  users_merchants_updated_by_idTousers users?     @relation("merchants_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "merchants_updated_by_id_foreign")
  users_merchants_user_idTousers       users?     @relation("merchants_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, map: "merchants_user_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model queue_jobs {
  id                                    BigInt    @id @default(autoincrement())
  job_type                              String?   @default("common") @db.VarChar(255)
  job_data                              String?
  action                                String?   @db.VarChar(255)
  body                                  Json?
  status                                String?   @default("pending") @db.VarChar(255)
  remark                                String?
  activated                             Boolean?  @default(true)
  created_at                            DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                            DateTime? @default(now()) @db.Timestamptz(6)
  created_by_id                         String?   @db.Uuid
  updated_by_id                         String?   @db.Uuid
  users_queue_jobs_created_by_idTousers users?    @relation("queue_jobs_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "queue_jobs_created_by_id_foreign")
  users_queue_jobs_updated_by_idTousers users?    @relation("queue_jobs_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "queue_jobs_updated_by_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model server_user_sessions {
  id                                              BigInt    @id @default(autoincrement())
  name                                            String    @unique(map: "server_user_sessions_name_unique") @db.VarChar(255)
  description                                     String?
  user_id                                         String?   @db.Uuid
  server_id                                       BigInt?
  activated                                       Boolean?  @default(true)
  created_at                                      DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                                      DateTime? @default(now()) @db.Timestamptz(6)
  created_by_id                                   String?   @db.Uuid
  updated_by_id                                   String?   @db.Uuid
  users_server_user_sessions_created_by_idTousers users?    @relation("server_user_sessions_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "server_user_sessions_created_by_id_foreign")
  servers                                         servers?  @relation(fields: [server_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "server_user_sessions_server_id_foreign")
  users_server_user_sessions_updated_by_idTousers users?    @relation("server_user_sessions_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "server_user_sessions_updated_by_id_foreign")
  users_server_user_sessions_user_idTousers       users?    @relation("server_user_sessions_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "server_user_sessions_user_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model servers {
  id                                 BigInt                 @id @default(autoincrement())
  host                               String                 @db.VarChar(255)
  access_key                         String?                @db.VarChar(255)
  secret_key                         String?                @db.VarChar(255)
  hash_method                        String?                @db.VarChar(255)
  status                             String?                @db.VarChar(255)
  activated                          Boolean?               @default(true)
  created_at                         DateTime?              @default(now()) @db.Timestamptz(6)
  updated_at                         DateTime?              @default(now()) @db.Timestamptz(6)
  created_by_id                      String?                @db.Uuid
  updated_by_id                      String?                @db.Uuid
  server_user_sessions               server_user_sessions[]
  users_servers_created_by_idTousers users?                 @relation("servers_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "servers_created_by_id_foreign")
  users_servers_updated_by_idTousers users?                 @relation("servers_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "servers_updated_by_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_message_bundle_templates {
  id                                                       String                   @id @unique(map: "user_message_bundle_templates_id_unique") @db.Uuid
  name                                                     String                   @unique(map: "user_message_bundle_templates_name_unique") @db.VarChar(255)
  description                                              String?
  user_id                                                  String?                  @db.Uuid
  activated                                                Boolean?                 @default(true)
  created_at                                               DateTime?                @default(now()) @db.Timestamptz(6)
  updated_at                                               DateTime?                @default(now()) @db.Timestamptz(6)
  created_by_id                                            String?                  @db.Uuid
  updated_by_id                                            String?                  @db.Uuid
  users_user_message_bundle_templates_created_by_idTousers users?                   @relation("user_message_bundle_templates_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_message_bundle_templates_created_by_id_foreign")
  users_user_message_bundle_templates_updated_by_idTousers users?                   @relation("user_message_bundle_templates_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_message_bundle_templates_updated_by_id_foreign")
  users_user_message_bundle_templates_user_idTousers       users?                   @relation("user_message_bundle_templates_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_message_bundle_templates_user_id_foreign")
  user_template_messages                                   user_template_messages[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_template_messages {
  id                                                String                         @id @unique(map: "user_template_messages_id_unique") @db.Uuid
  name                                              String                         @unique(map: "user_template_messages_name_unique") @db.VarChar(255)
  message                                           String?
  user_message_bundle_template_id                   String?                        @db.Uuid
  message_attachment_id                             String?                        @db.Uuid
  sort                                              Int?                           @default(0)
  que_count                                         Int?                           @default(0)
  sent_count                                        Int?                           @default(0)
  cancel_count                                      Int?                           @default(0)
  invalid_count                                     Int?                           @default(0)
  activated                                         Boolean?                       @default(true)
  created_at                                        DateTime?                      @default(now()) @db.Timestamptz(6)
  updated_at                                        DateTime?                      @default(now()) @db.Timestamptz(6)
  created_by_id                                     String?                        @db.Uuid
  updated_by_id                                     String?                        @db.Uuid
  chat_messages                                     chat_messages[]
  chat_messages_log                                 chat_messages_log[]
  users_user_template_messages_created_by_idTousers users?                         @relation("user_template_messages_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_template_messages_created_by_id_foreign")
  media                                             media?                         @relation(fields: [message_attachment_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_template_messages_message_attachment_id_foreign")
  users_user_template_messages_updated_by_idTousers users?                         @relation("user_template_messages_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_template_messages_updated_by_id_foreign")
  user_message_bundle_templates                     user_message_bundle_templates? @relation(fields: [user_message_bundle_template_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_template_messages_user_message_bundle_template_id_foreign")
}
