generator client {
    provider   = "prisma-client-js"
    engineType = "binary"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model countries {
    id                                                      BigInt         @id @default(autoincrement())
    name                                                    String?        @unique(map: "countries_name_unique") @db.VarChar(255)
    code                                                    String?        @db.VarChar(255)
    timezone                                                String?        @db.VarChar(255)
    currency_id                                             BigInt?
    activated                                               Boolean?       @default(true)
    created_at                                              DateTime?      @default(now()) @db.Timestamptz(6)
    updated_at                                              DateTime?      @default(now()) @db.Timestamptz(6)
    created_by_id                                           String?        @db.Uuid
    updated_by_id                                           String?        @db.Uuid
    users_countries_created_by_idTousers                    users?         @relation("countries_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "countries_created_by_id_foreign")
    currency                                                currencies?    @relation(fields: [currency_id], references: [id], onDelete: Cascade, map: "countries_currency_id_foreign")
    users_countries_updated_by_idTousers                    users?         @relation("countries_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "countries_updated_by_id_foreign")
    user_details_user_details_address_country_idTocountries user_details[] @relation("user_details_address_country_idTocountries")
    user_details_user_details_contact_country_idTocountries user_details[] @relation("user_details_contact_country_idTocountries")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model currencies {
    id                                    BigInt         @id @default(autoincrement())
    name                                  String?        @unique(map: "currencies_name_unique") @db.VarChar(255)
    code                                  String?        @db.VarChar(255)
    symbol                                String?        @db.VarChar(255)
    activated                             Boolean?       @default(true)
    created_at                            DateTime?      @default(now()) @db.Timestamptz(6)
    updated_at                            DateTime?      @default(now()) @db.Timestamptz(6)
    created_by_id                         String?        @db.Uuid
    updated_by_id                         String?        @db.Uuid
    countries                             countries[]
    users_currencies_created_by_idTousers users?         @relation("currencies_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "currencies_created_by_id_foreign")
    users_currencies_updated_by_idTousers users?         @relation("currencies_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "currencies_updated_by_id_foreign")
    user_details                          user_details[]
}

model knex_migrations {
    id             Int       @id @default(autoincrement())
    name           String?   @db.VarChar(255)
    batch          Int?
    migration_time DateTime? @db.Timestamptz(6)
}

model knex_migrations_lock {
    index     Int  @id @default(autoincrement())
    is_locked Int?
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model media {
    id                               String                       @id @unique(map: "media_id_unique") @db.Uuid
    name                             String?                      @unique(map: "media_name_unique") @db.VarChar(255)
    description                      String?
    activated                        Boolean?                     @default(true)
    created_at                       DateTime?                    @default(now()) @db.Timestamptz(6)
    updated_at                       DateTime?                    @default(now()) @db.Timestamptz(6)
    created_by_id                    String?                      @db.Uuid
    updated_by_id                    String?                      @db.Uuid
    chat_messages                    chat_messages[]
    companies                        companies[]
    company_categories               company_categories[]
    company_contact_categories       company_contact_categories[]
    users_media_created_by_idTousers users?                       @relation("media_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "media_created_by_id_foreign")
    users_media_updated_by_idTousers users?                       @relation("media_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "media_updated_by_id_foreign")
    media_files                      media_files[]
    products                         products[]
    user_details                     user_details[]
    user_template_messages           user_template_messages[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model roles {
    id                               BigInt     @id @default(autoincrement())
    name                             String?    @db.VarChar(255)
    description                      String?
    company_id                       String?    @db.Uuid
    activated                        Boolean?   @default(true)
    created_at                       DateTime?  @default(now()) @db.Timestamptz(6)
    updated_at                       DateTime?  @default(now()) @db.Timestamptz(6)
    created_by_id                    String?    @db.Uuid
    updated_by_id                    String?    @db.Uuid
    rbac                             rbac[]
    companies                        companies? @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "roles_company_id_foreign")
    users_roles_created_by_idTousers users?     @relation("roles_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "roles_created_by_id_foreign")
    users_roles_updated_by_idTousers users?     @relation("roles_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "roles_updated_by_id_foreign")
    users_users_role_idToroles       users[]    @relation("users_role_idToroles")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model sso_auth_providers {
    id                                                   BigInt    @id @default(autoincrement())
    name                                                 String?   @unique(map: "sso_auth_providers_name_unique") @db.VarChar(255)
    client_id                                            String?
    client_secret                                        String?
    activated                                            Boolean?  @default(true)
    created_at                                           DateTime? @default(now()) @db.Timestamptz(6)
    updated_at                                           DateTime? @default(now()) @db.Timestamptz(6)
    created_by_id                                        String?   @db.Uuid
    updated_by_id                                        String?   @db.Uuid
    users_sso_auth_providers_created_by_idTousers        users?    @relation("sso_auth_providers_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sso_auth_providers_created_by_id_foreign")
    users_sso_auth_providers_updated_by_idTousers        users?    @relation("sso_auth_providers_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "sso_auth_providers_updated_by_id_foreign")
    users_users_sso_auth_provider_idTosso_auth_providers users[]   @relation("users_sso_auth_provider_idTosso_auth_providers")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model users {
    id                                                                                       String                              @id @unique(map: "users_id_unique") @db.Uuid
    username                                                                                 String?                             @unique(map: "users_username_unique") @db.VarChar(255)
    password                                                                                 String?                             @db.VarChar(255)
    device_id                                                                                String?                             @db.VarChar(255)
    is_email_verified                                                                        Boolean?                            @default(false)
    email_verified_at                                                                        DateTime?                           @db.Timestamptz(6)
    is_phone_verified                                                                        Boolean?                            @default(false)
    phone_verified_at                                                                        DateTime?                           @db.Timestamptz(6)
    last_login_at                                                                            DateTime?                           @db.Timestamptz(6)
    user_detail_id                                                                           String?                             @unique(map: "users_user_detail_id_unique") @db.Uuid
    role_id                                                                                  BigInt?
    company_id                                                                               String?                             @db.Uuid
    merchant_id                                                                              String?                             @db.Uuid
    referral_id                                                                              String?                             @db.Uuid
    referral_code_id                                                                         String?                             @db.Uuid
    sso_auth_provider_id                                                                     BigInt?
    sso_token                                                                                String?                             @db.VarChar(255)
    is_password_changed                                                                      Boolean?                            @default(false)
    is_pruned                                                                                Boolean?                            @default(false)
    activated                                                                                Boolean?                            @default(true)
    created_at                                                                               DateTime?                           @default(now()) @db.Timestamptz(6)
    updated_at                                                                               DateTime?                           @default(now()) @db.Timestamptz(6)
    created_by_id                                                                            String?                             @db.Uuid
    updated_by_id                                                                            String?                             @db.Uuid
    all_messages_log_all_messages_log_created_by_idTousers                                   all_messages_log[]                  @relation("all_messages_log_created_by_idTousers")
    all_messages_log_all_messages_log_updated_by_idTousers                                   all_messages_log[]                  @relation("all_messages_log_updated_by_idTousers")
    auto_reply_company_keywords_auto_reply_company_keywords_created_by_idTousers             auto_reply_company_keywords[]       @relation("auto_reply_company_keywords_created_by_idTousers")
    auto_reply_company_keywords_auto_reply_company_keywords_updated_by_idTousers             auto_reply_company_keywords[]       @relation("auto_reply_company_keywords_updated_by_idTousers")
    auto_reply_company_settings_auto_reply_company_settings_created_by_idTousers             auto_reply_company_settings[]       @relation("auto_reply_company_settings_created_by_idTousers")
    auto_reply_company_settings_auto_reply_company_settings_updated_by_idTousers             auto_reply_company_settings[]       @relation("auto_reply_company_settings_updated_by_idTousers")
    autobot_company_flow_edges_autobot_company_flow_edges_created_by_idTousers               autobot_company_flow_edges[]        @relation("autobot_company_flow_edges_created_by_idTousers")
    autobot_company_flow_edges_autobot_company_flow_edges_updated_by_idTousers               autobot_company_flow_edges[]        @relation("autobot_company_flow_edges_updated_by_idTousers")
    autobot_company_flow_node_options_autobot_company_flow_node_options_created_by_idTousers autobot_company_flow_node_options[] @relation("autobot_company_flow_node_options_created_by_idTousers")
    autobot_company_flow_node_options_autobot_company_flow_node_options_updated_by_idTousers autobot_company_flow_node_options[] @relation("autobot_company_flow_node_options_updated_by_idTousers")
    autobot_company_flow_nodes_autobot_company_flow_nodes_created_by_idTousers               autobot_company_flow_nodes[]        @relation("autobot_company_flow_nodes_created_by_idTousers")
    autobot_company_flow_nodes_autobot_company_flow_nodes_updated_by_idTousers               autobot_company_flow_nodes[]        @relation("autobot_company_flow_nodes_updated_by_idTousers")
    autobot_company_flows_autobot_company_flows_created_by_idTousers                         autobot_company_flows[]             @relation("autobot_company_flows_created_by_idTousers")
    autobot_company_flows_autobot_company_flows_updated_by_idTousers                         autobot_company_flows[]             @relation("autobot_company_flows_updated_by_idTousers")
    autobot_company_flows_autobot_company_flows_user_idTousers                               autobot_company_flows[]             @relation("autobot_company_flows_user_idTousers")
    chat_messages_chat_messages_created_by_idTousers                                         chat_messages[]                     @relation("chat_messages_created_by_idTousers")
    chat_messages_chat_messages_updated_by_idTousers                                         chat_messages[]                     @relation("chat_messages_updated_by_idTousers")
    chat_messages_chat_messages_user_idTousers                                               chat_messages[]                     @relation("chat_messages_user_idTousers")
    chat_messages_log_chat_messages_log_created_by_idTousers                                 chat_messages_log[]                 @relation("chat_messages_log_created_by_idTousers")
    chat_messages_log_chat_messages_log_updated_by_idTousers                                 chat_messages_log[]                 @relation("chat_messages_log_updated_by_idTousers")
    chatrooms_chatrooms_created_by_idTousers                                                 chatrooms[]                         @relation("chatrooms_created_by_idTousers")
    chatrooms_chatrooms_updated_by_idTousers                                                 chatrooms[]                         @relation("chatrooms_updated_by_idTousers")
    chatrooms_chatrooms_user_idTousers                                                       chatrooms[]                         @relation("chatrooms_user_idTousers")
    companies_companies_created_by_idTousers                                                 companies[]                         @relation("companies_created_by_idTousers")
    companies_companies_updated_by_idTousers                                                 companies[]                         @relation("companies_updated_by_idTousers")
    company_categories_company_categories_created_by_idTousers                               company_categories[]                @relation("company_categories_created_by_idTousers")
    company_categories_company_categories_updated_by_idTousers                               company_categories[]                @relation("company_categories_updated_by_idTousers")
    company_contact_categories_company_contact_categories_created_by_idTousers               company_contact_categories[]        @relation("company_contact_categories_created_by_idTousers")
    company_contact_categories_company_contact_categories_updated_by_idTousers               company_contact_categories[]        @relation("company_contact_categories_updated_by_idTousers")
    company_subscriptions_company_subscriptions_created_by_idTousers                         company_subscriptions[]             @relation("company_subscriptions_created_by_idTousers")
    company_subscriptions_company_subscriptions_updated_by_idTousers                         company_subscriptions[]             @relation("company_subscriptions_updated_by_idTousers")
    contacts_contacts_created_by_idTousers                                                   contacts[]                          @relation("contacts_created_by_idTousers")
    contacts_contacts_updated_by_idTousers                                                   contacts[]                          @relation("contacts_updated_by_idTousers")
    contacts_contacts_user_idTousers                                                         contacts[]                          @relation("contacts_user_idTousers")
    countries_countries_created_by_idTousers                                                 countries[]                         @relation("countries_created_by_idTousers")
    countries_countries_updated_by_idTousers                                                 countries[]                         @relation("countries_updated_by_idTousers")
    currencies_currencies_created_by_idTousers                                               currencies[]                        @relation("currencies_created_by_idTousers")
    currencies_currencies_updated_by_idTousers                                               currencies[]                        @relation("currencies_updated_by_idTousers")
    customer_service_keywords_customer_service_keywords_created_by_idTousers                 customer_service_keywords[]         @relation("customer_service_keywords_created_by_idTousers")
    customer_service_keywords_customer_service_keywords_updated_by_idTousers                 customer_service_keywords[]         @relation("customer_service_keywords_updated_by_idTousers")
    customer_service_keywords_customer_service_keywords_user_idTousers                       customer_service_keywords[]         @relation("customer_service_keywords_user_idTousers")
    customer_service_tickets                                                                 customer_service_tickets[]
    customer_service_tickets_customer_service_tickets_created_by_idTousers                   customer_service_tickets[]          @relation("customer_service_tickets_created_by_idTousers")
    customer_service_tickets_customer_service_tickets_updated_by_idTousers                   customer_service_tickets[]          @relation("customer_service_tickets_updated_by_idTousers")
    inclusions_inclusions_created_by_idTousers                                               inclusions[]                        @relation("inclusions_created_by_idTousers")
    inclusions_inclusions_updated_by_idTousers                                               inclusions[]                        @relation("inclusions_updated_by_idTousers")
    media_media_created_by_idTousers                                                         media[]                             @relation("media_created_by_idTousers")
    media_media_updated_by_idTousers                                                         media[]                             @relation("media_updated_by_idTousers")
    media_files_media_files_created_by_idTousers                                             media_files[]                       @relation("media_files_created_by_idTousers")
    media_files_media_files_updated_by_idTousers                                             media_files[]                       @relation("media_files_updated_by_idTousers")
    merchants_merchants_created_by_idTousers                                                 merchants[]                         @relation("merchants_created_by_idTousers")
    merchants_merchants_updated_by_idTousers                                                 merchants[]                         @relation("merchants_updated_by_idTousers")
    merchants_merchants_user_idTousers                                                       merchants[]                         @relation("merchants_user_idTousers")
    password_reset_tokens_password_reset_tokens_created_by_idTousers                         password_reset_tokens[]             @relation("password_reset_tokens_created_by_idTousers")
    password_reset_tokens_password_reset_tokens_updated_by_idTousers                         password_reset_tokens[]             @relation("password_reset_tokens_updated_by_idTousers")
    permissions_permissions_created_by_idTousers                                             permissions[]                       @relation("permissions_created_by_idTousers")
    permissions_permissions_updated_by_idTousers                                             permissions[]                       @relation("permissions_updated_by_idTousers")
    products_products_created_by_idTousers                                                   products[]                          @relation("products_created_by_idTousers")
    products_products_updated_by_idTousers                                                   products[]                          @relation("products_updated_by_idTousers")
    queue_job_logs_queue_job_logs_created_by_idTousers                                       queue_job_logs[]                    @relation("queue_job_logs_created_by_idTousers")
    queue_job_logs_queue_job_logs_updated_by_idTousers                                       queue_job_logs[]                    @relation("queue_job_logs_updated_by_idTousers")
    queue_jobs_queue_jobs_created_by_idTousers                                               queue_jobs[]                        @relation("queue_jobs_created_by_idTousers")
    queue_jobs_queue_jobs_updated_by_idTousers                                               queue_jobs[]                        @relation("queue_jobs_updated_by_idTousers")
    rbac_rbac_created_by_idTousers                                                           rbac[]                              @relation("rbac_created_by_idTousers")
    rbac_rbac_updated_by_idTousers                                                           rbac[]                              @relation("rbac_updated_by_idTousers")
    referral_codes_referral_codes_created_by_idTousers                                       referral_codes[]                    @relation("referral_codes_created_by_idTousers")
    referral_codes_referral_codes_updated_by_idTousers                                       referral_codes[]                    @relation("referral_codes_updated_by_idTousers")
    referral_codes_referral_codes_user_idTousers                                             referral_codes[]                    @relation("referral_codes_user_idTousers")
    roles_roles_created_by_idTousers                                                         roles[]                             @relation("roles_created_by_idTousers")
    roles_roles_updated_by_idTousers                                                         roles[]                             @relation("roles_updated_by_idTousers")
    server_company_sessions_server_company_sessions_created_by_idTousers                     server_company_sessions[]           @relation("server_company_sessions_created_by_idTousers")
    server_company_sessions_server_company_sessions_updated_by_idTousers                     server_company_sessions[]           @relation("server_company_sessions_updated_by_idTousers")
    server_superadmin_sessions_server_superadmin_sessions_created_by_idTousers               server_superadmin_sessions[]        @relation("server_superadmin_sessions_created_by_idTousers")
    server_superadmin_sessions_server_superadmin_sessions_superadmin_idTousers               server_superadmin_sessions[]        @relation("server_superadmin_sessions_superadmin_idTousers")
    server_superadmin_sessions_server_superadmin_sessions_updated_by_idTousers               server_superadmin_sessions[]        @relation("server_superadmin_sessions_updated_by_idTousers")
    servers_servers_created_by_idTousers                                                     servers[]                           @relation("servers_created_by_idTousers")
    servers_servers_updated_by_idTousers                                                     servers[]                           @relation("servers_updated_by_idTousers")
    sso_auth_providers_sso_auth_providers_created_by_idTousers                               sso_auth_providers[]                @relation("sso_auth_providers_created_by_idTousers")
    sso_auth_providers_sso_auth_providers_updated_by_idTousers                               sso_auth_providers[]                @relation("sso_auth_providers_updated_by_idTousers")
    subscription_billing_cycles_subscription_billing_cycles_created_by_idTousers             subscription_billing_cycles[]       @relation("subscription_billing_cycles_created_by_idTousers")
    subscription_billing_cycles_subscription_billing_cycles_updated_by_idTousers             subscription_billing_cycles[]       @relation("subscription_billing_cycles_updated_by_idTousers")
    subscription_plan_inclusions_subscription_plan_inclusions_created_by_idTousers           subscription_plan_inclusions[]      @relation("subscription_plan_inclusions_created_by_idTousers")
    subscription_plan_inclusions_subscription_plan_inclusions_updated_by_idTousers           subscription_plan_inclusions[]      @relation("subscription_plan_inclusions_updated_by_idTousers")
    subscription_plan_pricings_subscription_plan_pricings_created_by_idTousers               subscription_plan_pricings[]        @relation("subscription_plan_pricings_created_by_idTousers")
    subscription_plan_pricings_subscription_plan_pricings_updated_by_idTousers               subscription_plan_pricings[]        @relation("subscription_plan_pricings_updated_by_idTousers")
    subscription_plans_subscription_plans_created_by_idTousers                               subscription_plans[]                @relation("subscription_plans_created_by_idTousers")
    subscription_plans_subscription_plans_updated_by_idTousers                               subscription_plans[]                @relation("subscription_plans_updated_by_idTousers")
    user_details_user_details_created_by_idTousers                                           user_details[]                      @relation("user_details_created_by_idTousers")
    user_details_user_details_updated_by_idTousers                                           user_details[]                      @relation("user_details_updated_by_idTousers")
    user_login_tokens_user_login_tokens_created_by_idTousers                                 user_login_tokens[]                 @relation("user_login_tokens_created_by_idTousers")
    user_login_tokens_user_login_tokens_updated_by_idTousers                                 user_login_tokens[]                 @relation("user_login_tokens_updated_by_idTousers")
    user_login_tokens_user_login_tokens_user_idTousers                                       user_login_tokens?                  @relation("user_login_tokens_user_idTousers")
    user_message_bundle_templates_user_message_bundle_templates_created_by_idTousers         user_message_bundle_templates[]     @relation("user_message_bundle_templates_created_by_idTousers")
    user_message_bundle_templates_user_message_bundle_templates_updated_by_idTousers         user_message_bundle_templates[]     @relation("user_message_bundle_templates_updated_by_idTousers")
    user_message_bundle_templates_user_message_bundle_templates_user_idTousers               user_message_bundle_templates[]     @relation("user_message_bundle_templates_user_idTousers")
    user_message_logs_user_message_logs_created_by_idTousers                                 user_message_logs[]                 @relation("user_message_logs_created_by_idTousers")
    user_message_logs_user_message_logs_from_user_idTousers                                  user_message_logs[]                 @relation("user_message_logs_from_user_idTousers")
    user_message_logs_user_message_logs_updated_by_idTousers                                 user_message_logs[]                 @relation("user_message_logs_updated_by_idTousers")
    user_settings_user_settings_created_by_idTousers                                         user_settings[]                     @relation("user_settings_created_by_idTousers")
    user_settings_user_settings_updated_by_idTousers                                         user_settings[]                     @relation("user_settings_updated_by_idTousers")
    user_settings_user_settings_user_idTousers                                               user_settings[]                     @relation("user_settings_user_idTousers")
    user_template_messages_user_template_messages_created_by_idTousers                       user_template_messages[]            @relation("user_template_messages_created_by_idTousers")
    user_template_messages_user_template_messages_updated_by_idTousers                       user_template_messages[]            @relation("user_template_messages_updated_by_idTousers")
    company                                                                                  companies?                          @relation("users_company_idTocompanies", fields: [company_id], references: [id], onDelete: Cascade, map: "users_company_id_foreign")
    users_users_created_by_idTousers                                                         users?                              @relation("users_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_created_by_id_foreign")
    other_users_users_created_by_idTousers                                                   users[]                             @relation("users_created_by_idTousers")
    merchant                                                                                 merchants?                          @relation("users_merchant_idTomerchants", fields: [merchant_id], references: [id], onDelete: Cascade, map: "users_merchant_id_foreign")
    referral_code                                                                            referral_codes?                     @relation("users_referral_code_idToreferral_codes", fields: [referral_code_id], references: [id], onDelete: Cascade, map: "users_referral_code_id_foreign")
    referral                                                                                 users?                              @relation("users_referral_idTousers", fields: [referral_id], references: [id], onDelete: Cascade, map: "users_referral_id_foreign")
    other_users_users_referral_idTousers                                                     users[]                             @relation("users_referral_idTousers")
    role                                                                                     roles?                              @relation("users_role_idToroles", fields: [role_id], references: [id], onDelete: Cascade, map: "users_role_id_foreign")
    sso_auth_provider                                                                        sso_auth_providers?                 @relation("users_sso_auth_provider_idTosso_auth_providers", fields: [sso_auth_provider_id], references: [id], onDelete: Cascade, map: "users_sso_auth_provider_id_foreign")
    users_users_updated_by_idTousers                                                         users?                              @relation("users_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_updated_by_id_foreign")
    other_users_users_updated_by_idTousers                                                   users[]                             @relation("users_updated_by_idTousers")
    user_details                                                                             user_details?                       @relation("users_user_detail_idTouser_details", fields: [user_detail_id], references: [id], onDelete: Cascade, map: "users_user_detail_id_foreign")
    verify_otps_verify_otps_created_by_idTousers                                             verify_otps[]                       @relation("verify_otps_created_by_idTousers")
    verify_otps_verify_otps_updated_by_idTousers                                             verify_otps[]                       @relation("verify_otps_updated_by_idTousers")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model chat_messages {
    id                                                 String                  @id @unique(map: "chat_messages_id_unique") @db.Uuid
    message                                            String?
    chatroom_id                                        String?                 @db.Uuid
    user_id                                            String?                 @db.Uuid
    contact_id                                         String?                 @db.Uuid
    user_template_message_id                           String?                 @db.Uuid
    message_attachment_id                              String?                 @db.Uuid
    is_sentby_contact                                  Boolean?                @default(false)
    is_seen                                            Boolean?                @default(false)
    activated                                          Boolean?                @default(true)
    created_at                                         DateTime?               @default(now()) @db.Timestamptz(6)
    updated_at                                         DateTime?               @default(now()) @db.Timestamptz(6)
    created_by_id                                      String?                 @db.Uuid
    updated_by_id                                      String?                 @db.Uuid
    chatrooms_chat_messages_chatroom_idTochatrooms     chatrooms?              @relation("chat_messages_chatroom_idTochatrooms", fields: [chatroom_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chat_messages_chatroom_id_foreign")
    contacts                                           contacts?               @relation(fields: [contact_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chat_messages_contact_id_foreign")
    users_chat_messages_created_by_idTousers           users?                  @relation("chat_messages_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chat_messages_created_by_id_foreign")
    media                                              media?                  @relation(fields: [message_attachment_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chat_messages_message_attachment_id_foreign")
    users_chat_messages_updated_by_idTousers           users?                  @relation("chat_messages_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chat_messages_updated_by_id_foreign")
    users_chat_messages_user_idTousers                 users?                  @relation("chat_messages_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chat_messages_user_id_foreign")
    user_template_messages                             user_template_messages? @relation(fields: [user_template_message_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chat_messages_user_template_message_id_foreign")
    chat_messages_log                                  chat_messages_log[]
    chatrooms_chatrooms_last_message_idTochat_messages chatrooms[]             @relation("chatrooms_last_message_idTochat_messages")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model chat_messages_log {
    id                                           String         @id @unique(map: "chat_messages_log_id_unique") @db.Uuid
    chat_message_id                              String?        @db.Uuid
    status                                       String?        @default("pending")
    activated                                    Boolean?       @default(true)
    created_at                                   DateTime?      @default(now()) @db.Timestamptz(6)
    updated_at                                   DateTime?      @default(now()) @db.Timestamptz(6)
    created_by_id                                String?        @db.Uuid
    updated_by_id                                String?        @db.Uuid
    chat_messages                                chat_messages? @relation(fields: [chat_message_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chat_messages_log_chat_message_id_foreign")
    users_chat_messages_log_created_by_idTousers users?         @relation("chat_messages_log_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chat_messages_log_created_by_id_foreign")
    users_chat_messages_log_updated_by_idTousers users?         @relation("chat_messages_log_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chat_messages_log_updated_by_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model chatrooms {
    id                                                     String                      @id @unique(map: "chatrooms_id_unique") @db.Uuid
    shortlink                                              String?                     @unique(map: "chatrooms_shortlink_unique")
    remark                                                 String?
    company_id                                             String?                     @db.Uuid
    user_id                                                String?                     @db.Uuid
    contact_id                                             String?                     @db.Uuid
    server_company_session_id                              BigInt?
    server_superadmin_session_id                           BigInt?
    last_message_id                                        String?                     @db.Uuid
    activated                                              Boolean?                    @default(true)
    created_at                                             DateTime?                   @default(now()) @db.Timestamptz(6)
    updated_at                                             DateTime?                   @default(now()) @db.Timestamptz(6)
    created_by_id                                          String?                     @db.Uuid
    updated_by_id                                          String?                     @db.Uuid
    chat_messages_chat_messages_chatroom_idTochatrooms     chat_messages[]             @relation("chat_messages_chatroom_idTochatrooms")
    companies                                              companies?                  @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chatrooms_company_id_foreign")
    contacts                                               contacts?                   @relation(fields: [contact_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chatrooms_contact_id_foreign")
    users_chatrooms_created_by_idTousers                   users?                      @relation("chatrooms_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chatrooms_created_by_id_foreign")
    chat_messages_chatrooms_last_message_idTochat_messages chat_messages?              @relation("chatrooms_last_message_idTochat_messages", fields: [last_message_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chatrooms_last_message_id_foreign")
    server_company_sessions                                server_company_sessions?    @relation(fields: [server_company_session_id], references: [id], onDelete: Cascade, map: "chatrooms_server_company_session_id_foreign")
    server_superadmin_sessions                             server_superadmin_sessions? @relation(fields: [server_superadmin_session_id], references: [id], onDelete: Cascade, map: "chatrooms_server_superadmin_session_id_foreign")
    users_chatrooms_updated_by_idTousers                   users?                      @relation("chatrooms_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chatrooms_updated_by_id_foreign")
    users_chatrooms_user_idTousers                         users?                      @relation("chatrooms_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "chatrooms_user_id_foreign")
    customer_service_tickets                               customer_service_tickets[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model companies {
    id                                   String                        @id @unique(map: "companies_id_unique") @db.Uuid
    name                                 String?                       @unique(map: "companies_name_unique") @db.VarChar(255)
    description                          String?
    registration_number                  String?                       @db.VarChar(255)
    official_contact_number              String?                       @db.VarChar(255)
    unofficial_contact_number            String?                       @db.VarChar(255)
    company_category_id                  BigInt?
    logo_id                              String?                       @db.Uuid
    activated                            Boolean?                      @default(true)
    created_at                           DateTime?                     @default(now()) @db.Timestamptz(6)
    updated_at                           DateTime?                     @default(now()) @db.Timestamptz(6)
    created_by_id                        String?                       @db.Uuid
    updated_by_id                        String?                       @db.Uuid
    auto_reply_company_settings          auto_reply_company_settings[]
    autobot_company_flows                autobot_company_flows[]
    chatrooms                            chatrooms[]
    company_category                     company_categories?           @relation(fields: [company_category_id], references: [id], onDelete: Cascade, map: "companies_company_category_id_foreign")
    users_companies_created_by_idTousers users?                        @relation("companies_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "companies_created_by_id_foreign")
    media                                media?                        @relation(fields: [logo_id], references: [id], onDelete: Cascade, map: "companies_logo_id_foreign")
    users_companies_updated_by_idTousers users?                        @relation("companies_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "companies_updated_by_id_foreign")
    company_contact_categories           company_contact_categories[]
    company_subscriptions                company_subscriptions[]
    contacts                             contacts[]
    customer_service_keywords            customer_service_keywords[]
    merchants                            merchants[]
    permissions                          permissions[]
    roles                                roles[]
    server_company_sessions              server_company_sessions[]
    user_message_logs                    user_message_logs[]
    users_users_company_idTocompanies    users[]                       @relation("users_company_idTocompanies")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model company_categories {
    id                                            BigInt      @id @default(autoincrement())
    name                                          String?     @unique(map: "company_categories_name_unique") @db.VarChar(255)
    description                                   String?
    icon_id                                       String?     @db.Uuid
    activated                                     Boolean?    @default(true)
    created_at                                    DateTime?   @default(now()) @db.Timestamptz(6)
    updated_at                                    DateTime?   @default(now()) @db.Timestamptz(6)
    created_by_id                                 String?     @db.Uuid
    updated_by_id                                 String?     @db.Uuid
    companies                                     companies[]
    users_company_categories_created_by_idTousers users?      @relation("company_categories_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "company_categories_created_by_id_foreign")
    media                                         media?      @relation(fields: [icon_id], references: [id], onDelete: Cascade, map: "company_categories_icon_id_foreign")
    users_company_categories_updated_by_idTousers users?      @relation("company_categories_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "company_categories_updated_by_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model contacts {
    id                                  String                      @id @unique(map: "contacts_id_unique") @db.Uuid
    user_detail_id                      String?                     @db.Uuid
    company_id                          String?                     @db.Uuid
    user_id                             String?                     @db.Uuid
    company_contact_category_id         BigInt?
    tags                                String?
    remark                              String?
    activated                           Boolean?                    @default(true)
    created_at                          DateTime?                   @default(now()) @db.Timestamptz(6)
    updated_at                          DateTime?                   @default(now()) @db.Timestamptz(6)
    created_by_id                       String?                     @db.Uuid
    updated_by_id                       String?                     @db.Uuid
    chat_messages                       chat_messages[]
    chatrooms                           chatrooms[]
    company_contact_categories          company_contact_categories? @relation(fields: [company_contact_category_id], references: [id], onDelete: Cascade, map: "contacts_company_contact_category_id_foreign")
    companies                           companies?                  @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "contacts_company_id_foreign")
    users_contacts_created_by_idTousers users?                      @relation("contacts_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "contacts_created_by_id_foreign")
    users_contacts_updated_by_idTousers users?                      @relation("contacts_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "contacts_updated_by_id_foreign")
    user_details                        user_details?               @relation(fields: [user_detail_id], references: [id], onDelete: Cascade, map: "contacts_user_detail_id_foreign")
    users_contacts_user_idTousers       users?                      @relation("contacts_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, map: "contacts_user_id_foreign")
    customer_service_tickets            customer_service_tickets[]
    user_message_logs                   user_message_logs[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model media_files {
    id                                     String    @id @unique(map: "media_files_id_unique") @db.Uuid
    resolution                             String?   @db.VarChar(255)
    file_key                               String?   @db.VarChar(255)
    file_type                              String?   @db.VarChar(255)
    url                                    String?   @db.VarChar(255)
    media_id                               String?   @db.Uuid
    activated                              Boolean?  @default(true)
    created_at                             DateTime? @default(now()) @db.Timestamptz(6)
    updated_at                             DateTime? @default(now()) @db.Timestamptz(6)
    created_by_id                          String?   @db.Uuid
    updated_by_id                          String?   @db.Uuid
    users_media_files_created_by_idTousers users?    @relation("media_files_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "media_files_created_by_id_foreign")
    media                                  media?    @relation(fields: [media_id], references: [id], onDelete: Cascade, map: "media_files_media_id_foreign")
    users_media_files_updated_by_idTousers users?    @relation("media_files_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "media_files_updated_by_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model merchants {
    id                                   String     @id @unique(map: "merchants_id_unique") @db.Uuid
    remark                               String?
    company_id                           String?    @db.Uuid
    user_id                              String?    @db.Uuid
    credits                              Int?       @default(0)
    activated                            Boolean?   @default(true)
    created_at                           DateTime?  @default(now()) @db.Timestamptz(6)
    updated_at                           DateTime?  @default(now()) @db.Timestamptz(6)
    created_by_id                        String?    @db.Uuid
    updated_by_id                        String?    @db.Uuid
    companies                            companies? @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "merchants_company_id_foreign")
    users_merchants_created_by_idTousers users?     @relation("merchants_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "merchants_created_by_id_foreign")
    users_merchants_updated_by_idTousers users?     @relation("merchants_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "merchants_updated_by_id_foreign")
    users_merchants_user_idTousers       users?     @relation("merchants_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, map: "merchants_user_id_foreign")
    users_users_merchant_idTomerchants   users[]    @relation("users_merchant_idTomerchants")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model queue_jobs {
    id                                    BigInt              @id @default(autoincrement())
    job_type                              String?             @default("common") @db.VarChar(255)
    job_name                              String?
    model_id                              String?
    action                                String?             @db.VarChar(255)
    payload                               Json?
    status                                String?             @default("pending")
    remark                                String?
    scheduled_at                          DateTime?           @db.Timestamptz(6)
    executed_at                           DateTime?           @db.Timestamptz(6)
    activated                             Boolean?            @default(true)
    created_at                            DateTime?           @default(now()) @db.Timestamptz(6)
    updated_at                            DateTime?           @default(now()) @db.Timestamptz(6)
    created_by_id                         String?             @db.Uuid
    updated_by_id                         String?             @db.Uuid
    queue_job_logs                        queue_job_logs[]
    users_queue_jobs_created_by_idTousers users?              @relation("queue_jobs_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "queue_jobs_created_by_id_foreign")
    users_queue_jobs_updated_by_idTousers users?              @relation("queue_jobs_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "queue_jobs_updated_by_id_foreign")
    user_message_logs                     user_message_logs[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model servers {
    id                                 BigInt                       @id @default(autoincrement())
    host                               String                       @db.VarChar(255)
    access_key                         String?                      @db.VarChar(255)
    secret_key                         String?                      @db.VarChar(255)
    hash_method                        String?                      @db.VarChar(255)
    status                             String?                      @db.VarChar(255)
    activated                          Boolean?                     @default(true)
    created_at                         DateTime?                    @default(now()) @db.Timestamptz(6)
    updated_at                         DateTime?                    @default(now()) @db.Timestamptz(6)
    created_by_id                      String?                      @db.Uuid
    updated_by_id                      String?                      @db.Uuid
    server_company_sessions            server_company_sessions[]
    server_superadmin_sessions         server_superadmin_sessions[]
    users_servers_created_by_idTousers users?                       @relation("servers_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "servers_created_by_id_foreign")
    users_servers_updated_by_idTousers users?                       @relation("servers_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "servers_updated_by_id_foreign")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_details {
    id                                       String      @id @unique(map: "user_details_id_unique") @db.Uuid
    nickname                                 String?     @db.VarChar(255)
    email                                    String?     @unique(map: "user_details_email_unique") @db.VarChar(255)
    secondary_email                          String?     @db.VarChar(255)
    first_name                               String?     @db.VarChar(255)
    last_name                                String?     @db.VarChar(255)
    contact_number                           String?     @unique(map: "user_details_contact_number_unique") @db.VarChar(255)
    contact_country_id                       BigInt?
    age                                      Int?        @default(0)
    gender                                   String?     @default("male")
    ic_number                                String?     @unique(map: "user_details_ic_number_unique") @db.VarChar(255)
    birthdate                                DateTime?   @db.Date
    avatar_id                                String?     @db.Uuid
    address_line1                            String?     @db.VarChar(255)
    address_line2                            String?     @db.VarChar(255)
    address_state                            String?     @db.VarChar(255)
    address_city                             String?     @db.VarChar(255)
    address_country_id                       BigInt?
    currency_id                              BigInt?
    social_telegram                          String?     @db.VarChar(255)
    social_facebook                          String?     @db.VarChar(255)
    social_instagram                         String?     @db.VarChar(255)
    activated                                Boolean?    @default(true)
    created_at                               DateTime?   @default(now()) @db.Timestamptz(6)
    updated_at                               DateTime?   @default(now()) @db.Timestamptz(6)
    created_by_id                            String?     @db.Uuid
    updated_by_id                            String?     @db.Uuid
    contacts                                 contacts[]
    address_country                          countries?  @relation("user_details_address_country_idTocountries", fields: [address_country_id], references: [id], onDelete: Cascade, map: "user_details_address_country_id_foreign")
    avatar                                   media?      @relation(fields: [avatar_id], references: [id], onDelete: Cascade, map: "user_details_avatar_id_foreign")
    contact_country                          countries?  @relation("user_details_contact_country_idTocountries", fields: [contact_country_id], references: [id], onDelete: Cascade, map: "user_details_contact_country_id_foreign")
    users_user_details_created_by_idTousers  users?      @relation("user_details_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_details_created_by_id_foreign")
    currency                                 currencies? @relation(fields: [currency_id], references: [id], onDelete: Cascade, map: "user_details_currency_id_foreign")
    users_user_details_updated_by_idTousers  users?      @relation("user_details_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_details_updated_by_id_foreign")
    users_users_user_detail_idTouser_details users?      @relation("users_user_detail_idTouser_details")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model auto_reply_company_keywords {
    id                                                     String                       @id @unique(map: "auto_reply_company_keywords_id_unique") @db.Uuid
    keyword                                                String?
    auto_reply_company_setting_id                          String?                      @db.Uuid
    activated                                              Boolean?                     @default(true)
    created_at                                             DateTime?                    @default(now()) @db.Timestamptz(6)
    updated_at                                             DateTime?                    @default(now()) @db.Timestamptz(6)
    created_by_id                                          String?                      @db.Uuid
    updated_by_id                                          String?                      @db.Uuid
    auto_reply_company_settings                            auto_reply_company_settings? @relation(fields: [auto_reply_company_setting_id], references: [id], onDelete: Cascade, map: "auto_reply_company_keywords_auto_reply_company_setting_id_forei")
    users_auto_reply_company_keywords_created_by_idTousers users?                       @relation("auto_reply_company_keywords_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auto_reply_company_keywords_created_by_id_foreign")
    users_auto_reply_company_keywords_updated_by_idTousers users?                       @relation("auto_reply_company_keywords_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auto_reply_company_keywords_updated_by_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model auto_reply_company_settings {
    id                                                     String                        @id @unique(map: "auto_reply_company_settings_id_unique") @db.Uuid
    name                                                   String?                       @db.VarChar(255)
    reply                                                  String?
    company_id                                             String?                       @db.Uuid
    server_company_session_id                              BigInt?
    server_superadmin_session_id                           BigInt?
    activated                                              Boolean?                      @default(true)
    created_at                                             DateTime?                     @default(now()) @db.Timestamptz(6)
    updated_at                                             DateTime?                     @default(now()) @db.Timestamptz(6)
    created_by_id                                          String?                       @db.Uuid
    updated_by_id                                          String?                       @db.Uuid
    auto_reply_company_keywords                            auto_reply_company_keywords[]
    companies                                              companies?                    @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "auto_reply_company_settings_company_id_foreign")
    users_auto_reply_company_settings_created_by_idTousers users?                        @relation("auto_reply_company_settings_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auto_reply_company_settings_created_by_id_foreign")
    server_company_sessions                                server_company_sessions?      @relation(fields: [server_company_session_id], references: [id], onDelete: Cascade, map: "auto_reply_company_settings_server_company_session_id_foreign")
    server_superadmin_sessions                             server_superadmin_sessions?   @relation(fields: [server_superadmin_session_id], references: [id], onDelete: Cascade, map: "auto_reply_company_settings_server_superadmin_session_id_foreig")
    users_auto_reply_company_settings_updated_by_idTousers users?                        @relation("auto_reply_company_settings_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "auto_reply_company_settings_updated_by_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model company_contact_categories {
    id                                                    BigInt     @id @default(autoincrement())
    name                                                  String?    @db.VarChar(255)
    description                                           String?
    icon_id                                               String?    @db.Uuid
    company_id                                            String?    @db.Uuid
    activated                                             Boolean?   @default(true)
    created_at                                            DateTime?  @default(now()) @db.Timestamptz(6)
    updated_at                                            DateTime?  @default(now()) @db.Timestamptz(6)
    created_by_id                                         String?    @db.Uuid
    updated_by_id                                         String?    @db.Uuid
    companies                                             companies? @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "company_contact_categories_company_id_foreign")
    users_company_contact_categories_created_by_idTousers users?     @relation("company_contact_categories_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "company_contact_categories_created_by_id_foreign")
    media                                                 media?     @relation(fields: [icon_id], references: [id], onDelete: Cascade, map: "company_contact_categories_icon_id_foreign")
    users_company_contact_categories_updated_by_idTousers users?     @relation("company_contact_categories_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "company_contact_categories_updated_by_id_foreign")
    contacts                                              contacts[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model company_subscriptions {
    id                                               String                     @id @unique(map: "company_subscriptions_id_unique") @db.Uuid
    company_id                                       String?                    @db.Uuid
    subscription_plan_pricing_id                     BigInt
    remark                                           String?
    credits                                          Int?                       @default(0)
    start_date                                       DateTime?                  @db.Timestamptz(6)
    end_date                                         DateTime?                  @db.Timestamptz(6)
    status                                           String                     @default("pending")
    activated                                        Boolean?                   @default(true)
    created_at                                       DateTime?                  @default(now()) @db.Timestamptz(6)
    updated_at                                       DateTime?                  @default(now()) @db.Timestamptz(6)
    created_by_id                                    String?                    @db.Uuid
    updated_by_id                                    String?                    @db.Uuid
    companies                                        companies?                 @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "company_subscriptions_company_id_foreign")
    users_company_subscriptions_created_by_idTousers users?                     @relation("company_subscriptions_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "company_subscriptions_created_by_id_foreign")
    subscription_plan_pricings                       subscription_plan_pricings @relation(fields: [subscription_plan_pricing_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "company_subscriptions_subscription_plan_pricing_id_foreign")
    users_company_subscriptions_updated_by_idTousers users?                     @relation("company_subscriptions_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "company_subscriptions_updated_by_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model customer_service_keywords {
    id                                                   String     @id @unique(map: "customer_service_keywords_id_unique") @db.Uuid
    keyword                                              String?
    company_id                                           String?    @db.Uuid
    user_id                                              String?    @db.Uuid
    activated                                            Boolean?   @default(true)
    created_at                                           DateTime?  @default(now()) @db.Timestamptz(6)
    updated_at                                           DateTime?  @default(now()) @db.Timestamptz(6)
    created_by_id                                        String?    @db.Uuid
    updated_by_id                                        String?    @db.Uuid
    companies                                            companies? @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "customer_service_keywords_company_id_foreign")
    users_customer_service_keywords_created_by_idTousers users?     @relation("customer_service_keywords_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "customer_service_keywords_created_by_id_foreign")
    users_customer_service_keywords_updated_by_idTousers users?     @relation("customer_service_keywords_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "customer_service_keywords_updated_by_id_foreign")
    users_customer_service_keywords_user_idTousers       users?     @relation("customer_service_keywords_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, map: "customer_service_keywords_user_id_foreign")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model customer_service_tickets {
    id                                                  String     @id @unique(map: "customer_service_tickets_id_unique") @db.Uuid
    ticket_no                                           String?    @unique(map: "customer_service_tickets_ticket_no_unique") @db.VarChar(255)
    subject                                             String?    @db.VarChar(255)
    description                                         String?
    customer_id                                         String?    @db.Uuid
    admin_id                                            String?    @db.Uuid
    chatroom_id                                         String?    @db.Uuid
    status                                              String     @default("pending")
    priority                                            String     @default("pending")
    activated                                           Boolean?   @default(true)
    created_at                                          DateTime?  @default(now()) @db.Timestamptz(6)
    updated_at                                          DateTime?  @default(now()) @db.Timestamptz(6)
    created_by_id                                       String?    @db.Uuid
    updated_by_id                                       String?    @db.Uuid
    merchants                                           users?     @relation(fields: [admin_id], references: [id], onDelete: Cascade, map: "customer_service_tickets_admin_id_foreign")
    chatrooms                                           chatrooms? @relation(fields: [chatroom_id], references: [id], onDelete: Cascade, map: "customer_service_tickets_chatroom_id_foreign")
    users_customer_service_tickets_created_by_idTousers users?     @relation("customer_service_tickets_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "customer_service_tickets_created_by_id_foreign")
    company_contacts                                    contacts?  @relation(fields: [customer_id], references: [id], onDelete: Cascade, map: "customer_service_tickets_customer_id_foreign")
    users_customer_service_tickets_updated_by_idTousers users?     @relation("customer_service_tickets_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "customer_service_tickets_updated_by_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model password_reset_tokens {
    id                                               BigInt    @id @default(autoincrement())
    email                                            String?   @db.VarChar(255)
    username                                         String?   @db.VarChar(255)
    token                                            String?
    activated                                        Boolean?  @default(true)
    created_at                                       DateTime? @default(now()) @db.Timestamptz(6)
    updated_at                                       DateTime? @default(now()) @db.Timestamptz(6)
    created_by_id                                    String?   @db.Uuid
    updated_by_id                                    String?   @db.Uuid
    users_password_reset_tokens_created_by_idTousers users?    @relation("password_reset_tokens_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "password_reset_tokens_created_by_id_foreign")
    users_password_reset_tokens_updated_by_idTousers users?    @relation("password_reset_tokens_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "password_reset_tokens_updated_by_id_foreign")

    @@unique([email, username], map: "password_reset_tokens_email_username_unique")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model permissions {
    id                                     BigInt     @id @default(autoincrement())
    name                                   String?    @unique(map: "permissions_name_unique") @db.VarChar(255)
    description                            String?
    company_id                             String?    @db.Uuid
    activated                              Boolean?   @default(true)
    created_at                             DateTime?  @default(now()) @db.Timestamptz(6)
    updated_at                             DateTime?  @default(now()) @db.Timestamptz(6)
    created_by_id                          String?    @db.Uuid
    updated_by_id                          String?    @db.Uuid
    companies                              companies? @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "permissions_company_id_foreign")
    users_permissions_created_by_idTousers users?     @relation("permissions_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "permissions_created_by_id_foreign")
    users_permissions_updated_by_idTousers users?     @relation("permissions_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "permissions_updated_by_id_foreign")
    rbac                                   rbac[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model rbac {
    id                              BigInt       @id @default(autoincrement())
    role_id                         BigInt?
    permission_id                   BigInt?
    activated                       Boolean?     @default(true)
    created_at                      DateTime?    @default(now()) @db.Timestamptz(6)
    updated_at                      DateTime?    @default(now()) @db.Timestamptz(6)
    created_by_id                   String?      @db.Uuid
    updated_by_id                   String?      @db.Uuid
    users_rbac_created_by_idTousers users?       @relation("rbac_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "rbac_created_by_id_foreign")
    permission                      permissions? @relation(fields: [permission_id], references: [id], onDelete: Cascade, map: "rbac_permission_id_foreign")
    role                            roles?       @relation(fields: [role_id], references: [id], onDelete: Cascade, map: "rbac_role_id_foreign")
    users_rbac_updated_by_idTousers users?       @relation("rbac_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "rbac_updated_by_id_foreign")

    @@unique([role_id, permission_id], map: "rbac_role_id_permission_id_unique")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model subscription_plans {
    id                                            BigInt                         @id @default(autoincrement())
    name                                          String?                        @unique(map: "subscription_plans_name_unique") @db.VarChar(255)
    description                                   String?
    type                                          String?                        @default("paid")
    status                                        String?                        @default("draft")
    activated                                     Boolean?                       @default(true)
    created_at                                    DateTime?                      @default(now()) @db.Timestamptz(6)
    updated_at                                    DateTime?                      @default(now()) @db.Timestamptz(6)
    created_by_id                                 String?                        @db.Uuid
    updated_by_id                                 String?                        @db.Uuid
    subscription_plan_inclusions                  subscription_plan_inclusions[]
    subscription_plan_pricings                    subscription_plan_pricings[]
    users_subscription_plans_created_by_idTousers users?                         @relation("subscription_plans_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "subscription_plans_created_by_id_foreign")
    users_subscription_plans_updated_by_idTousers users?                         @relation("subscription_plans_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "subscription_plans_updated_by_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_settings {
    id                                       String    @id @unique(map: "user_settings_id_unique") @db.Uuid
    name                                     String?   @db.VarChar(255)
    value_type                               String?   @db.VarChar(255)
    value                                    String?
    user_id                                  String?   @db.Uuid
    activated                                Boolean?  @default(true)
    created_at                               DateTime? @default(now()) @db.Timestamptz(6)
    updated_at                               DateTime? @default(now()) @db.Timestamptz(6)
    created_by_id                            String?   @db.Uuid
    updated_by_id                            String?   @db.Uuid
    users_user_settings_created_by_idTousers users?    @relation("user_settings_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_settings_created_by_id_foreign")
    users_user_settings_updated_by_idTousers users?    @relation("user_settings_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_settings_updated_by_id_foreign")
    users_user_settings_user_idTousers       users?    @relation("user_settings_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, map: "user_settings_user_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model verify_otps {
    id                                     BigInt    @id @default(autoincrement())
    email                                  String?   @db.VarChar(255)
    username                               String?   @db.VarChar(255)
    contact_number                         String?   @unique(map: "verify_otps_contact_number_unique") @db.VarChar(255)
    otp                                    String?
    activated                              Boolean?  @default(true)
    created_at                             DateTime? @default(now()) @db.Timestamptz(6)
    updated_at                             DateTime? @default(now()) @db.Timestamptz(6)
    created_by_id                          String?   @db.Uuid
    updated_by_id                          String?   @db.Uuid
    users_verify_otps_created_by_idTousers users?    @relation("verify_otps_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "verify_otps_created_by_id_foreign")
    users_verify_otps_updated_by_idTousers users?    @relation("verify_otps_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "verify_otps_updated_by_id_foreign")

    @@unique([email, username], map: "verify_otps_email_username_unique")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model server_company_sessions {
    id                                                 BigInt                        @id @default(autoincrement())
    name                                               String                        @unique(map: "server_company_sessions_name_unique") @db.VarChar(255)
    description                                        String?
    channel_type                                       String?                       @default("whatsapp") @db.VarChar(255)
    channel_id                                         String?
    channel_push_name                                  String?
    channel_number                                     String?
    company_id                                         String?                       @db.Uuid
    server_id                                          BigInt?
    superadmin_session_id                              BigInt?
    activated                                          Boolean?                      @default(true)
    created_at                                         DateTime?                     @default(now()) @db.Timestamptz(6)
    updated_at                                         DateTime?                     @default(now()) @db.Timestamptz(6)
    created_by_id                                      String?                       @db.Uuid
    updated_by_id                                      String?                       @db.Uuid
    auto_reply_company_settings                        auto_reply_company_settings[]
    autobot_company_flows                              autobot_company_flows[]
    chatrooms                                          chatrooms[]
    companies                                          companies?                    @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "server_company_sessions_company_id_foreign")
    users_server_company_sessions_created_by_idTousers users?                        @relation("server_company_sessions_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "server_company_sessions_created_by_id_foreign")
    servers                                            servers?                      @relation(fields: [server_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "server_company_sessions_server_id_foreign")
    server_superadmin_sessions                         server_superadmin_sessions?   @relation(fields: [superadmin_session_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "server_company_sessions_superadmin_session_id_foreign")
    users_server_company_sessions_updated_by_idTousers users?                        @relation("server_company_sessions_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "server_company_sessions_updated_by_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model server_superadmin_sessions {
    id                                                    BigInt                        @id @default(autoincrement())
    name                                                  String                        @unique(map: "server_superadmin_sessions_name_unique") @db.VarChar(255)
    description                                           String?
    channel_type                                          String?                       @default("whatsapp") @db.VarChar(255)
    channel_id                                            String?
    channel_push_name                                     String?
    channel_number                                        String?
    superadmin_id                                         String?                       @db.Uuid
    server_id                                             BigInt?
    activated                                             Boolean?                      @default(true)
    created_at                                            DateTime?                     @default(now()) @db.Timestamptz(6)
    updated_at                                            DateTime?                     @default(now()) @db.Timestamptz(6)
    created_by_id                                         String?                       @db.Uuid
    updated_by_id                                         String?                       @db.Uuid
    auto_reply_company_settings                           auto_reply_company_settings[]
    autobot_company_flows                                 autobot_company_flows[]
    chatrooms                                             chatrooms[]
    server_company_sessions                               server_company_sessions[]
    users_server_superadmin_sessions_created_by_idTousers users?                        @relation("server_superadmin_sessions_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "server_superadmin_sessions_created_by_id_foreign")
    servers                                               servers?                      @relation(fields: [server_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "server_superadmin_sessions_server_id_foreign")
    users_server_superadmin_sessions_superadmin_idTousers users?                        @relation("server_superadmin_sessions_superadmin_idTousers", fields: [superadmin_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "server_superadmin_sessions_superadmin_id_foreign")
    users_server_superadmin_sessions_updated_by_idTousers users?                        @relation("server_superadmin_sessions_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "server_superadmin_sessions_updated_by_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model all_messages_log {
    id                                          BigInt    @id @default(autoincrement())
    session_name                                String?   @db.VarChar(255)
    from                                        String?   @db.VarChar(255)
    to                                          String?   @db.VarChar(255)
    message                                     String?
    body                                        Json?
    activated                                   Boolean?  @default(true)
    created_at                                  DateTime? @default(now()) @db.Timestamptz(6)
    updated_at                                  DateTime? @default(now()) @db.Timestamptz(6)
    created_by_id                               String?   @db.Uuid
    updated_by_id                               String?   @db.Uuid
    users_all_messages_log_created_by_idTousers users?    @relation("all_messages_log_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "all_messages_log_created_by_id_foreign")
    users_all_messages_log_updated_by_idTousers users?    @relation("all_messages_log_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "all_messages_log_updated_by_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model inclusions {
    id                                    BigInt                         @id @default(autoincrement())
    name                                  String?                        @unique(map: "inclusions_name_unique") @db.VarChar(255)
    description                           String?
    value                                 String?                        @db.VarChar(255)
    remark                                String?
    activated                             Boolean?                       @default(true)
    created_at                            DateTime?                      @default(now()) @db.Timestamptz(6)
    updated_at                            DateTime?                      @default(now()) @db.Timestamptz(6)
    created_by_id                         String?                        @db.Uuid
    updated_by_id                         String?                        @db.Uuid
    users_inclusions_created_by_idTousers users?                         @relation("inclusions_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "inclusions_created_by_id_foreign")
    users_inclusions_updated_by_idTousers users?                         @relation("inclusions_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "inclusions_updated_by_id_foreign")
    subscription_plan_inclusions          subscription_plan_inclusions[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model products {
    id                                  BigInt                         @id @default(autoincrement())
    name                                String?                        @unique(map: "products_name_unique") @db.VarChar(255)
    description                         String?
    icon_id                             String?                        @db.Uuid
    url                                 String?
    activated                           Boolean?                       @default(true)
    created_at                          DateTime?                      @default(now()) @db.Timestamptz(6)
    updated_at                          DateTime?                      @default(now()) @db.Timestamptz(6)
    created_by_id                       String?                        @db.Uuid
    updated_by_id                       String?                        @db.Uuid
    users_products_created_by_idTousers users?                         @relation("products_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "products_created_by_id_foreign")
    media                               media?                         @relation(fields: [icon_id], references: [id], onDelete: Cascade, map: "products_icon_id_foreign")
    users_products_updated_by_idTousers users?                         @relation("products_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "products_updated_by_id_foreign")
    subscription_plan_inclusions        subscription_plan_inclusions[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model subscription_billing_cycles {
    id                                                     BigInt                       @id @default(autoincrement())
    name                                                   String?                      @unique(map: "subscription_billing_cycles_name_unique") @db.VarChar(255)
    duration                                               String?
    activated                                              Boolean?                     @default(true)
    created_at                                             DateTime?                    @default(now()) @db.Timestamptz(6)
    updated_at                                             DateTime?                    @default(now()) @db.Timestamptz(6)
    created_by_id                                          String?                      @db.Uuid
    updated_by_id                                          String?                      @db.Uuid
    users_subscription_billing_cycles_created_by_idTousers users?                       @relation("subscription_billing_cycles_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "subscription_billing_cycles_created_by_id_foreign")
    users_subscription_billing_cycles_updated_by_idTousers users?                       @relation("subscription_billing_cycles_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "subscription_billing_cycles_updated_by_id_foreign")
    subscription_plan_pricings                             subscription_plan_pricings[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model subscription_plan_inclusions {
    id                                                      BigInt              @id @default(autoincrement())
    subscription_plan_id                                    BigInt?
    inclusion_id                                            BigInt?
    product_id                                              BigInt?
    activated                                               Boolean?            @default(true)
    created_at                                              DateTime?           @default(now()) @db.Timestamptz(6)
    updated_at                                              DateTime?           @default(now()) @db.Timestamptz(6)
    created_by_id                                           String?             @db.Uuid
    updated_by_id                                           String?             @db.Uuid
    users_subscription_plan_inclusions_created_by_idTousers users?              @relation("subscription_plan_inclusions_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "subscription_plan_inclusions_created_by_id_foreign")
    inclusions                                              inclusions?         @relation(fields: [inclusion_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "subscription_plan_inclusions_inclusion_id_foreign")
    products                                                products?           @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "subscription_plan_inclusions_product_id_foreign")
    subscription_plans                                      subscription_plans? @relation(fields: [subscription_plan_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "subscription_plan_inclusions_subscription_plan_id_foreign")
    users_subscription_plan_inclusions_updated_by_idTousers users?              @relation("subscription_plan_inclusions_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "subscription_plan_inclusions_updated_by_id_foreign")

    @@unique([subscription_plan_id, inclusion_id, product_id], map: "subscription_plan_inclusions_subscription_plan_id_inclusion_id_")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model subscription_plan_pricings {
    id                                                    BigInt                       @id @default(autoincrement())
    price                                                 Float?
    subscription_plan_id                                  BigInt?
    billing_cycle_id                                      BigInt?
    activated                                             Boolean?                     @default(true)
    created_at                                            DateTime?                    @default(now()) @db.Timestamptz(6)
    updated_at                                            DateTime?                    @default(now()) @db.Timestamptz(6)
    created_by_id                                         String?                      @db.Uuid
    updated_by_id                                         String?                      @db.Uuid
    company_subscriptions                                 company_subscriptions[]
    subscription_billing_cycles                           subscription_billing_cycles? @relation(fields: [billing_cycle_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "subscription_plan_pricings_billing_cycle_id_foreign")
    users_subscription_plan_pricings_created_by_idTousers users?                       @relation("subscription_plan_pricings_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "subscription_plan_pricings_created_by_id_foreign")
    subscription_plans                                    subscription_plans?          @relation(fields: [subscription_plan_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "subscription_plan_pricings_subscription_plan_id_foreign")
    users_subscription_plan_pricings_updated_by_idTousers users?                       @relation("subscription_plan_pricings_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "subscription_plan_pricings_updated_by_id_foreign")

    @@unique([subscription_plan_id, billing_cycle_id], map: "subscription_plan_pricings_subscription_plan_id_billing_cycle_i")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_login_tokens {
    id                                           String    @id @unique(map: "user_login_tokens_id_unique") @db.Uuid
    token                                        String    @unique(map: "user_login_tokens_token_unique")
    access_token                                 String?   @unique(map: "user_login_tokens_access_token_unique")
    refresh_token                                String?
    expired_at                                   DateTime? @db.Timestamptz(6)
    user_id                                      String?   @unique(map: "user_login_tokens_user_id_unique") @db.Uuid
    activated                                    Boolean?  @default(true)
    created_at                                   DateTime? @default(now()) @db.Timestamptz(6)
    updated_at                                   DateTime? @default(now()) @db.Timestamptz(6)
    created_by_id                                String?   @db.Uuid
    updated_by_id                                String?   @db.Uuid
    users_user_login_tokens_created_by_idTousers users?    @relation("user_login_tokens_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_login_tokens_created_by_id_foreign")
    users_user_login_tokens_updated_by_idTousers users?    @relation("user_login_tokens_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_login_tokens_updated_by_id_foreign")
    users_user_login_tokens_user_idTousers       users?    @relation("user_login_tokens_user_idTousers", fields: [user_id], references: [id], onDelete: Cascade, map: "user_login_tokens_user_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model autobot_company_flow_edges {
    id                                                                                               String                      @id @unique(map: "autobot_company_flow_edges_id_unique") @db.Uuid
    flow_id                                                                                          String?                     @db.Uuid
    source_node_id                                                                                   String?                     @db.Uuid
    target_node_id                                                                                   String?                     @db.Uuid
    activated                                                                                        Boolean?                    @default(true)
    created_at                                                                                       DateTime?                   @default(now()) @db.Timestamptz(6)
    updated_at                                                                                       DateTime?                   @default(now()) @db.Timestamptz(6)
    created_by_id                                                                                    String?                     @db.Uuid
    updated_by_id                                                                                    String?                     @db.Uuid
    users_autobot_company_flow_edges_created_by_idTousers                                            users?                      @relation("autobot_company_flow_edges_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "autobot_company_flow_edges_created_by_id_foreign")
    autobot_company_flows                                                                            autobot_company_flows?      @relation(fields: [flow_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "autobot_company_flow_edges_flow_id_foreign")
    autobot_company_flow_nodes_autobot_company_flow_edges_source_node_idToautobot_company_flow_nodes autobot_company_flow_nodes? @relation("autobot_company_flow_edges_source_node_idToautobot_company_flow_nodes", fields: [source_node_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "autobot_company_flow_edges_source_node_id_foreign")
    autobot_company_flow_nodes_autobot_company_flow_edges_target_node_idToautobot_company_flow_nodes autobot_company_flow_nodes? @relation("autobot_company_flow_edges_target_node_idToautobot_company_flow_nodes", fields: [target_node_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "autobot_company_flow_edges_target_node_id_foreign")
    users_autobot_company_flow_edges_updated_by_idTousers                                            users?                      @relation("autobot_company_flow_edges_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "autobot_company_flow_edges_updated_by_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model autobot_company_flow_node_options {
    id                                                                                                         String                      @id @unique(map: "autobot_company_flow_node_options_id_unique") @db.Uuid
    option_text                                                                                                String                      @db.VarChar(255)
    option_value                                                                                               String?
    flow_node_id                                                                                               String?                     @db.Uuid
    flow_node_next_id                                                                                          String?                     @db.Uuid
    activated                                                                                                  Boolean?                    @default(true)
    created_at                                                                                                 DateTime?                   @default(now()) @db.Timestamptz(6)
    updated_at                                                                                                 DateTime?                   @default(now()) @db.Timestamptz(6)
    created_by_id                                                                                              String?                     @db.Uuid
    updated_by_id                                                                                              String?                     @db.Uuid
    users_autobot_company_flow_node_options_created_by_idTousers                                               users?                      @relation("autobot_company_flow_node_options_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "autobot_company_flow_node_options_created_by_id_foreign")
    autobot_company_flow_nodes_autobot_company_flow_node_options_flow_node_idToautobot_company_flow_nodes      autobot_company_flow_nodes? @relation("autobot_company_flow_node_options_flow_node_idToautobot_company_flow_nodes", fields: [flow_node_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "autobot_company_flow_node_options_flow_node_id_foreign")
    autobot_company_flow_nodes_autobot_company_flow_node_options_flow_node_next_idToautobot_company_flow_nodes autobot_company_flow_nodes? @relation("autobot_company_flow_node_options_flow_node_next_idToautobot_company_flow_nodes", fields: [flow_node_next_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "autobot_company_flow_node_options_flow_node_next_id_foreign")
    users_autobot_company_flow_node_options_updated_by_idTousers                                               users?                      @relation("autobot_company_flow_node_options_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "autobot_company_flow_node_options_updated_by_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model autobot_company_flow_nodes {
    id                                                                                                                String                              @id @unique(map: "autobot_company_flow_nodes_id_unique") @db.Uuid
    type                                                                                                              String                              @db.VarChar(255)
    content                                                                                                           String?
    flow_id                                                                                                           String?                             @db.Uuid
    activated                                                                                                         Boolean?                            @default(true)
    created_at                                                                                                        DateTime?                           @default(now()) @db.Timestamptz(6)
    updated_at                                                                                                        DateTime?                           @default(now()) @db.Timestamptz(6)
    created_by_id                                                                                                     String?                             @db.Uuid
    updated_by_id                                                                                                     String?                             @db.Uuid
    autobot_company_flow_edges_autobot_company_flow_edges_source_node_idToautobot_company_flow_nodes                  autobot_company_flow_edges[]        @relation("autobot_company_flow_edges_source_node_idToautobot_company_flow_nodes")
    autobot_company_flow_edges_autobot_company_flow_edges_target_node_idToautobot_company_flow_nodes                  autobot_company_flow_edges[]        @relation("autobot_company_flow_edges_target_node_idToautobot_company_flow_nodes")
    autobot_company_flow_node_options_autobot_company_flow_node_options_flow_node_idToautobot_company_flow_nodes      autobot_company_flow_node_options[] @relation("autobot_company_flow_node_options_flow_node_idToautobot_company_flow_nodes")
    autobot_company_flow_node_options_autobot_company_flow_node_options_flow_node_next_idToautobot_company_flow_nodes autobot_company_flow_node_options[] @relation("autobot_company_flow_node_options_flow_node_next_idToautobot_company_flow_nodes")
    users_autobot_company_flow_nodes_created_by_idTousers                                                             users?                              @relation("autobot_company_flow_nodes_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "autobot_company_flow_nodes_created_by_id_foreign")
    autobot_company_flows                                                                                             autobot_company_flows?              @relation(fields: [flow_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "autobot_company_flow_nodes_flow_id_foreign")
    users_autobot_company_flow_nodes_updated_by_idTousers                                                             users?                              @relation("autobot_company_flow_nodes_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "autobot_company_flow_nodes_updated_by_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model autobot_company_flows {
    id                                               String                       @id @unique(map: "autobot_company_flows_id_unique") @db.Uuid
    name                                             String                       @db.VarChar(255)
    description                                      String?
    company_id                                       String?                      @db.Uuid
    server_company_session_id                        BigInt?
    server_superadmin_session_id                     BigInt?
    user_id                                          String?                      @db.Uuid
    activated                                        Boolean?                     @default(true)
    created_at                                       DateTime?                    @default(now()) @db.Timestamptz(6)
    updated_at                                       DateTime?                    @default(now()) @db.Timestamptz(6)
    created_by_id                                    String?                      @db.Uuid
    updated_by_id                                    String?                      @db.Uuid
    autobot_company_flow_edges                       autobot_company_flow_edges[]
    autobot_company_flow_nodes                       autobot_company_flow_nodes[]
    companies                                        companies?                   @relation(fields: [company_id], references: [id], onDelete: Cascade, map: "autobot_company_flows_company_id_foreign")
    users_autobot_company_flows_created_by_idTousers users?                       @relation("autobot_company_flows_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "autobot_company_flows_created_by_id_foreign")
    server_company_sessions                          server_company_sessions?     @relation(fields: [server_company_session_id], references: [id], onDelete: Cascade, map: "autobot_company_flows_server_company_session_id_foreign")
    server_superadmin_sessions                       server_superadmin_sessions?  @relation(fields: [server_superadmin_session_id], references: [id], onDelete: Cascade, map: "autobot_company_flows_server_superadmin_session_id_foreign")
    users_autobot_company_flows_updated_by_idTousers users?                       @relation("autobot_company_flows_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "autobot_company_flows_updated_by_id_foreign")
    users_autobot_company_flows_user_idTousers       users?                       @relation("autobot_company_flows_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "autobot_company_flows_user_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model queue_job_logs {
    id                                        BigInt     @id @default(autoincrement())
    message                                   String?
    log_level                                 String?    @default("info") @db.VarChar(255)
    job_id                                    BigInt
    activated                                 Boolean?   @default(true)
    created_at                                DateTime?  @default(now()) @db.Timestamptz(6)
    updated_at                                DateTime?  @default(now()) @db.Timestamptz(6)
    created_by_id                             String?    @db.Uuid
    updated_by_id                             String?    @db.Uuid
    users_queue_job_logs_created_by_idTousers users?     @relation("queue_job_logs_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "queue_job_logs_created_by_id_foreign")
    queue_jobs                                queue_jobs @relation(fields: [job_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "queue_job_logs_job_id_foreign")
    users_queue_job_logs_updated_by_idTousers users?     @relation("queue_job_logs_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "queue_job_logs_updated_by_id_foreign")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model referral_codes {
    id                                           String    @id @unique(map: "referral_codes_id_unique") @db.Uuid
    code                                         String?   @unique(map: "referral_codes_code_unique") @db.VarChar(255)
    user_id                                      String?   @db.Uuid
    activated                                    Boolean?  @default(true)
    created_at                                   DateTime? @default(now()) @db.Timestamptz(6)
    updated_at                                   DateTime? @default(now()) @db.Timestamptz(6)
    created_by_id                                String?   @db.Uuid
    updated_by_id                                String?   @db.Uuid
    users_referral_codes_created_by_idTousers    users?    @relation("referral_codes_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "referral_codes_created_by_id_foreign")
    users_referral_codes_updated_by_idTousers    users?    @relation("referral_codes_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "referral_codes_updated_by_id_foreign")
    users_referral_codes_user_idTousers          users?    @relation("referral_codes_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "referral_codes_user_id_foreign")
    users_users_referral_code_idToreferral_codes users[]   @relation("users_referral_code_idToreferral_codes")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_message_bundle_templates {
    id                                                       String                   @id @unique(map: "user_message_bundle_templates_id_unique") @db.Uuid
    name                                                     String                   @db.VarChar(255)
    description                                              String?
    user_id                                                  String?                  @db.Uuid
    activated                                                Boolean?                 @default(true)
    created_at                                               DateTime?                @default(now()) @db.Timestamptz(6)
    updated_at                                               DateTime?                @default(now()) @db.Timestamptz(6)
    created_by_id                                            String?                  @db.Uuid
    updated_by_id                                            String?                  @db.Uuid
    users_user_message_bundle_templates_created_by_idTousers users?                   @relation("user_message_bundle_templates_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_message_bundle_templates_created_by_id_foreign")
    users_user_message_bundle_templates_updated_by_idTousers users?                   @relation("user_message_bundle_templates_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_message_bundle_templates_updated_by_id_foreign")
    users_user_message_bundle_templates_user_idTousers       users?                   @relation("user_message_bundle_templates_user_idTousers", fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_message_bundle_templates_user_id_foreign")
    user_template_messages                                   user_template_messages[]
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_template_messages {
    id                                                String                         @id @unique(map: "user_template_messages_id_unique") @db.Uuid
    name                                              String                         @db.VarChar(255)
    message                                           String?
    merchant_message_bundle_template_id               String?                        @db.Uuid
    message_attachment_id                             String?                        @db.Uuid
    sort                                              Int?                           @default(0)
    que_count                                         Int?                           @default(0)
    sent_count                                        Int?                           @default(0)
    cancel_count                                      Int?                           @default(0)
    invalid_count                                     Int?                           @default(0)
    activated                                         Boolean?                       @default(true)
    created_at                                        DateTime?                      @default(now()) @db.Timestamptz(6)
    updated_at                                        DateTime?                      @default(now()) @db.Timestamptz(6)
    created_by_id                                     String?                        @db.Uuid
    updated_by_id                                     String?                        @db.Uuid
    chat_messages                                     chat_messages[]
    users_user_template_messages_created_by_idTousers users?                         @relation("user_template_messages_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_template_messages_created_by_id_foreign")
    user_message_bundle_templates                     user_message_bundle_templates? @relation(fields: [merchant_message_bundle_template_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_template_messages_merchant_message_bundle_template_id_fore")
    media                                             media?                         @relation(fields: [message_attachment_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_template_messages_message_attachment_id_foreign")
    users_user_template_messages_updated_by_idTousers users?                         @relation("user_template_messages_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_template_messages_updated_by_id_foreign")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model user_message_logs {
    id                                           BigInt      @id @default(autoincrement())
    company_id                                   String?     @db.Uuid
    from_user_id                                 String?     @db.Uuid
    to_contact_id                                String?     @db.Uuid
    job_id                                       BigInt?
    message                                      String?
    status                                       String?     @default("pending")
    scheduled_at                                 DateTime?   @db.Timestamptz(6)
    executed_at                                  DateTime?   @db.Timestamptz(6)
    activated                                    Boolean?    @default(true)
    created_at                                   DateTime?   @default(now()) @db.Timestamptz(6)
    updated_at                                   DateTime?   @default(now()) @db.Timestamptz(6)
    created_by_id                                String?     @db.Uuid
    updated_by_id                                String?     @db.Uuid
    companies                                    companies?  @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_message_logs_company_id_foreign")
    users_user_message_logs_created_by_idTousers users?      @relation("user_message_logs_created_by_idTousers", fields: [created_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_message_logs_created_by_id_foreign")
    users_user_message_logs_from_user_idTousers  users?      @relation("user_message_logs_from_user_idTousers", fields: [from_user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_message_logs_from_user_id_foreign")
    queue_jobs                                   queue_jobs? @relation(fields: [job_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_message_logs_job_id_foreign")
    contacts                                     contacts?   @relation(fields: [to_contact_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_message_logs_to_contact_id_foreign")
    users_user_message_logs_updated_by_idTousers users?      @relation("user_message_logs_updated_by_idTousers", fields: [updated_by_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "user_message_logs_updated_by_id_foreign")
}
